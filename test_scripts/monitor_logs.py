#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
"""

import subprocess
import threading
import time
import json
import re
from datetime import datetime
import os

class LogMonitor:
    def __init__(self):
        self.services = ['backend', 'frontend', 'ml-service', 'db', 'worker']
        self.log_patterns = {
            'error': re.compile(r'(ERROR|Error|error|FAIL|Failed|failed|Exception|exception)', re.IGNORECASE),
            'warning': re.compile(r'(WARN|Warning|warning)', re.IGNORECASE),
            'info': re.compile(r'(INFO|Info|info|SUCCESS|Success|success)', re.IGNORECASE),
            'debug': re.compile(r'(DEBUG|Debug|debug)', re.IGNORECASE)
        }
        self.error_count = {service: 0 for service in self.services}
        self.warning_count = {service: 0 for service in self.services}
        self.log_entries = []
        self.monitoring = False
        
    def analyze_log_line(self, service, line):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        log_entry = {
            'timestamp': timestamp,
            'service': service,
            'line': line.strip(),
            'level': 'info'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
        if self.log_patterns['error'].search(line):
            log_entry['level'] = 'error'
            self.error_count[service] += 1
        elif self.log_patterns['warning'].search(line):
            log_entry['level'] = 'warning'
            self.warning_count[service] += 1
        elif self.log_patterns['debug'].search(line):
            log_entry['level'] = 'debug'
            
        self.log_entries.append(log_entry)
        
        # –í—ã–≤–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if log_entry['level'] == 'error':
            print(f"üî¥ [{timestamp}] {service}: {line.strip()}")
        elif log_entry['level'] == 'warning':
            print(f"üü° [{timestamp}] {service}: {line.strip()}")
            
    def monitor_service_logs(self, service):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            cmd = ['docker-compose', 'logs', '-f', service]
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            print(f"üìä –ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞: {service}")
            
            while self.monitoring:
                line = process.stdout.readline()
                if line:
                    self.analyze_log_line(service, line)
                elif process.poll() is not None:
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {service}: {str(e)}")
            
    def check_docker_compose_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ docker-compose"""
        try:
            result = subprocess.run(
                ['docker-compose', 'ps'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode != 0:
                print("‚ùå Docker-compose –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
                return False
                
            lines = result.stdout.strip().split('\n')
            if len(lines) < 2:
                print("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
            print("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    parts = line.split()
                    if len(parts) >= 2:
                        service_name = parts[0]
                        status = ' '.join(parts[1:])
                        if 'Up' in status:
                            print(f"‚úÖ {service_name}: {status}")
                        else:
                            print(f"‚ùå {service_name}: {status}")
                            
            return True
            
        except subprocess.TimeoutExpired:
            print("‚è±Ô∏è Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ docker-compose")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            return False
            
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"""
        report = {
            'monitoring_duration': time.time() - self.start_time,
            'total_log_entries': len(self.log_entries),
            'error_counts': self.error_count,
            'warning_counts': self.warning_count,
            'critical_errors': [],
            'services_status': {}
        }
        
        # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        for entry in self.log_entries:
            if entry['level'] == 'error':
                report['critical_errors'].append(entry)
                
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in self.services:
            total_errors = self.error_count[service]
            total_warnings = self.warning_count[service]
            
            if total_errors > 10:
                status = 'critical'
            elif total_errors > 5:
                status = 'warning'
            elif total_warnings > 20:
                status = 'warning'
            else:
                status = 'healthy'
                
            report['services_status'][service] = {
                'status': status,
                'errors': total_errors,
                'warnings': total_warnings
            }
            
        return report
        
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        os.makedirs('test_results', exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        with open('test_results/detailed_logs.json', 'w', encoding='utf-8') as f:
            json.dump(self.log_entries, f, indent=2, ensure_ascii=False)
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = self.generate_report()
        with open('test_results/monitoring_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
        print(f"üìÑ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results/")
        
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("="*60)
        
        total_errors = sum(self.error_count.values())
        total_warnings = sum(self.warning_count.values())
        
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {len(self.log_entries)}")
        print(f"üî¥ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        print(f"üü° –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {time.time() - self.start_time:.1f}s")
        
        print("\nüìã –û—à–∏–±–∫–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:")
        for service in self.services:
            errors = self.error_count[service]
            warnings = self.warning_count[service]
            print(f"  {service}: {errors} –æ—à–∏–±–æ–∫, {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            
        # –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        error_entries = [e for e in self.log_entries if e['level'] == 'error']
        if error_entries:
            print("\nüî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
            for entry in error_entries[-5:]:
                print(f"  [{entry['timestamp']}] {entry['service']}: {entry['line'][:100]}...")
                
    def start_monitoring(self, duration=60):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
        if not self.check_docker_compose_status():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            return
            
        self.monitoring = True
        self.start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        threads = []
        for service in self.services:
            thread = threading.Thread(
                target=self.monitor_service_logs,
                args=(service,),
                daemon=True
            )
            thread.start()
            threads.append(thread)
            
        try:
            print(f"‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
            print("üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π...")
            time.sleep(duration)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        finally:
            self.monitoring = False
            print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            for thread in threads:
                thread.join(timeout=2)
                
            self.save_logs()
            self.print_summary()
            
    def quick_health_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üè• –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        if not self.check_docker_compose_status():
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        self.monitoring = True
        self.start_time = time.time()
        
        threads = []
        for service in self.services:
            thread = threading.Thread(
                target=self.monitor_service_logs,
                args=(service,),
                daemon=True
            )
            thread.start()
            threads.append(thread)
            
        time.sleep(10)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 10 —Å–µ–∫—É–Ω–¥
        self.monitoring = False
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_errors = sum(self.error_count.values())
        
        if total_errors > 5:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∞—Ö")
            return False
        elif total_errors > 0:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏")
            return True
        else:
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            return True

if __name__ == "__main__":
    monitor = LogMonitor()
    
    import sys
    if len(sys.argv) > 1:
        if sys.argv[1] == "quick":
            monitor.quick_health_check()
        elif sys.argv[1] == "long":
            monitor.start_monitoring(300)  # 5 –º–∏–Ω—É—Ç
        else:
            try:
                duration = int(sys.argv[1])
                monitor.start_monitoring(duration)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏")
    else:
        monitor.start_monitoring()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
