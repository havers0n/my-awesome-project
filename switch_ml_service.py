#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ ML —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import os
import sys
import subprocess

ML_SERVICES = {
    "local": "http://localhost:8000/predict",
    "mock": "http://localhost:8000/predict", 
    "docker": "http://ml-service:5678/forecast",
    "external": None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
}

def set_ml_service(service_type, custom_url=None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ML —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    if service_type == "external" and custom_url:
        url = custom_url
    elif service_type in ML_SERVICES:
        url = ML_SERVICES[service_type]
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞: {service_type}")
        return False
    
    print(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ML —Å–µ—Ä–≤–∏—Å–∞: {service_type}")
    print(f"   URL: {url}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        if os.name == 'nt':  # Windows
            cmd = f'setx ML_SERVICE_URL "{url}"'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª–∏)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {result.stderr}")
        else:  # Linux/Mac
            print("   –î–æ–±–∞–≤—å—Ç–µ –≤ ~/.bashrc –∏–ª–∏ ~/.zshrc:")
            print(f"   export ML_SERVICE_URL=\"{url}\"")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    env_path = os.path.join("backend", ".env")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
        env_lines = []
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                env_lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º ML_SERVICE_URL
        ml_service_updated = False
        for i, line in enumerate(env_lines):
            if line.startswith('ML_SERVICE_URL='):
                env_lines[i] = f'ML_SERVICE_URL={url}\n'
                ml_service_updated = True
                break
        
        if not ml_service_updated:
            env_lines.append(f'ML_SERVICE_URL={url}\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
        with open(env_path, 'w', encoding='utf-8') as f:
            f.writelines(env_lines)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª {env_path}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª: {e}")
    
    return True

def show_current_config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ML —Å–µ—Ä–≤–∏—Å–∞"""
    print("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML —Å–µ—Ä–≤–∏—Å–∞:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_url = os.getenv('ML_SERVICE_URL')
    if env_url:
        print(f"   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_url}")
    else:
        print("   –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_path = os.path.join("backend", ".env")
    if os.path.exists(env_path):
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith('ML_SERVICE_URL='):
                        print(f"   .env —Ñ–∞–π–ª: {line.strip()}")
                        break
                else:
                    print("   .env —Ñ–∞–π–ª: –Ω–µ –Ω–∞–π–¥–µ–Ω ML_SERVICE_URL")
        except Exception as e:
            print(f"   .env —Ñ–∞–π–ª: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
    else:
        print("   .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_ml_service(url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        import requests
        response = requests.get(url.replace('/predict', '/health').replace('/forecast', '/health'), timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
            return True
        else:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {url}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {url} - {e}")
        return False

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python switch_ml_service.py <—Ç–∏–ø_—Å–µ—Ä–≤–∏—Å–∞> [URL]")
        print()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print("  local    - –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å (http://localhost:8000/predict)")
        print("  mock     - Mock —Å–µ—Ä–≤–∏—Å (http://localhost:8000/predict)")
        print("  docker   - Docker Compose —Å–µ—Ä–≤–∏—Å (http://ml-service:5678/forecast)")
        print("  external - –í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å URL)")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python switch_ml_service.py local")
        print("  python switch_ml_service.py external http://192.168.1.100:8000/predict")
        print("  python switch_ml_service.py external https://ml-api.company.com/predict")
        print()
        print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print("  python switch_ml_service.py status")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "status":
        show_current_config()
        return
    
    if command == "external":
        if len(sys.argv) < 3:
            print("‚ùå –î–ª—è external —Å–µ—Ä–≤–∏—Å–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å URL")
            print("   –ü—Ä–∏–º–µ—Ä: python switch_ml_service.py external http://192.168.1.100:8000/predict")
            sys.exit(1)
        
        custom_url = sys.argv[2]
        if set_ml_service("external", custom_url):
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞...")
            test_ml_service(custom_url)
    
    elif command in ML_SERVICES:
        if set_ml_service(command):
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞...")
            test_ml_service(ML_SERVICES[command])
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞: {command}")
        sys.exit(1)
    
    print("\n" + "=" * 50)
    print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:")
    print("   cd backend && npm run dev")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ML —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:")
    print("   python test_integration.py")

if __name__ == "__main__":
    main() 