import pytest
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from fastapi.testclient import TestClient
import json
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from microservice import app

class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤"""

    @pytest.fixture()
    def client(self):
        return TestClient(app)

    def test_minimal_data(self, client):
        """–¢–µ—Å—Ç –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": "2025-07-07",
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–†–µ–¥–∫–∏–π —Ç–æ–≤–∞—Ä",
                "–ö–æ–¥": "RARE001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 1000.0
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200

    def test_outliers(self, client):
        """–¢–µ—Å—Ç –¥–ª—è –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": "2025-07-07",
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–°—Ç—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä",
                "–ö–æ–¥": "OUTLIER001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10000,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 0.1
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200

    def test_high_price_sensitivity(self, client):
        """–¢–µ—Å—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–µ"""
        item_name = "–ó–æ–ª–æ—Ç–æ"
        item_code = "GOLD001"
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": "2025-07-07",
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": item_name,
                "–ö–æ–¥": item_code,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 1000000.0
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        predicted_quantity = response.json()[1]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        assert predicted_quantity < 10, \
                f"Expected low sales due to high price, got {predicted_quantity}"

    def test_large_number_of_items(self, client):
        """–¢–µ—Å—Ç –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        payload = [{"DaysCount": 30}]
        for i in range(1000):
            payload.append({
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": "2025-07-07",
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": f"–¢–æ–≤–∞—Ä {i}",
                "–ö–æ–¥": f"LARGE{i:04d}",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            })
        response = client.post("/forecast", json=payload)
        predicted_quantities = [result["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] for result in response.json()[1:]]
        assert response.status_code == 200
        assert len(predicted_quantities) == 1000, "Not all items received a forecast"
        assert all(quantity > 0 for quantity in predicted_quantities), \
                "Some forecasts are invalid!"

    def test_zero_quantity_sales(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–¢–æ–≤–∞—Ä –±–µ–∑ –ø—Ä–æ–¥–∞–∂",
                "–ö–æ–¥": "ZERO001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 0,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        result = response.json()
        # –î–∞–∂–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø—Ä–æ–¥–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        assert result[1]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] >= 1

    def test_negative_values_handling(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–û—à–∏–±–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä",
                "–ö–æ–¥": "NEG001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": -10,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            }
        ]
        response = client.post("/forecast", json=payload)
        # –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        assert response.status_code in [200, 400]

    def test_extreme_dates(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –¥–∞—Ç"""
        extreme_dates = [
            "2020-01-01",  # –ü—Ä–æ—à–ª–æ–µ
            "2030-12-31",  # –î–∞–ª–µ–∫–æ–µ –±—É–¥—É—â–µ–µ
            "2025-02-29",  # –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
        ]
        
        for date in extreme_dates:
            payload = [
                {"DaysCount": 7},
                {
                    "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                    "–ü–µ—Ä–∏–æ–¥": date,
                    "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–¢–æ–≤–∞—Ä —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π",
                    "–ö–æ–¥": "DATE001",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                    "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
                }
            ]
            response = client.post("/forecast", json=payload)
            assert response.status_code == 200

    def test_missing_optional_fields(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä",
                # –ö–æ–¥ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –Ω–µ–≥–æ
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5
                # –¶–µ–Ω–∞ —Ç–æ–∂–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        result = response.json()
        assert result[1]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] > 0

    def test_unicode_and_special_chars(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        special_items = [
            "–¢–æ–≤–∞—Ä —Å —ç–º–æ–¥–∑–∏ üçé",
            "–¢–æ–≤–∞—Ä —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –ê–ë–í–ì–î",
            "Product with \"quotes\"",
            "Item with 'apostrophes'",
            "–¢–æ–≤–∞—Ä\n—Å\n–ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏",
            "–¢–æ–≤–∞—Ä\t—Å\t—Ç–∞–±—É–ª—è—Ü–∏–µ–π",
            "ÂïÜÂìÅÂêçÁß∞",  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            "ÿ≥ŸÑÿπÿ©",  # –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        ]
        
        payload = [{"DaysCount": 7}]
        for i, item_name in enumerate(special_items):
            payload.append({
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": item_name,
                "–ö–æ–¥": f"UNICODE{i:03d}",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            })
        
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        results = response.json()
        assert len(results) == len(special_items) + 1  # +1 –¥–ª—è –æ–±—â–µ–π –º–µ—Ç—Ä–∏–∫–∏

    def test_very_long_forecast_period(self, client):
        """–¢–µ—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        payload = [
            {"DaysCount": 1000},  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ~3 –≥–æ–¥–∞
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä",
                "–ö–æ–¥": "LONG001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        result = response.json()
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º –¥–∞–∂–µ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        predicted = result[1]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        assert predicted > 0
        assert predicted < 1000000  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª

    def test_mixed_event_types(self, client):
        """–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (–ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ—Å—Ç–∞–≤–∫–∏)"""
        payload = [
            {"DaysCount": 14},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–¢–æ–≤–∞—Ä —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏",
                "–ö–æ–¥": "MIX001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            },
            {
                "Type": "–ü–æ—Å—Ç–∞–≤–∫–∞",
                "–ü–µ—Ä–∏–æ–¥": (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–¢–æ–≤–∞—Ä —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏",
                "–ö–æ–¥": "MIX001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 100,
                "–¶–µ–Ω–∞": 80.0
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200

    def test_float_days_count(self, client):
        """–¢–µ—Å—Ç –¥—Ä–æ–±–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
        payload = [
            {"DaysCount": 7.5},  # –î—Ä–æ–±–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–¢–æ–≤–∞—Ä —Å –¥—Ä–æ–±–Ω—ã–º–∏ –¥–Ω—è–º–∏",
                "–ö–æ–¥": "FLOAT001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            }
        ]
        response = client.post("/forecast", json=payload)
        # –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ª–∏–±–æ –ø—Ä–∏–Ω—è—Ç—å, –ª–∏–±–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –¥—Ä–æ–±–Ω—ã–µ –¥–Ω–∏
        assert response.status_code in [200, 400]

    def test_duplicate_items(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤"""
        payload = [
            {"DaysCount": 7},
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ç–æ–≤–∞—Ä",
                "–ö–æ–¥": "DUP001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            },
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ç–æ–≤–∞—Ä",
                "–ö–æ–¥": "DUP001",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 20,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 150.0
            }
        ]
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        results = response.json()
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ–±–∞ —Ç–æ–≤–∞—Ä–∞
        assert len(results) >= 3  # –û–±—â–∞—è –º–µ—Ç—Ä–∏–∫–∞ + 2 —Ç–æ–≤–∞—Ä–∞

    def test_extreme_quantities(self, client):
        """–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤"""
        extreme_cases = [
            (0.001, "TINY001"),      # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            (1000000, "HUGE001"),    # –û–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            (0, "ZERO002"),          # –ù–æ–ª—å
        ]
        
        payload = [{"DaysCount": 7}]
        for quantity, code in extreme_cases:
            payload.append({
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": datetime.now().strftime("%Y-%m-%d"),
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": f"–¢–æ–≤–∞—Ä —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}",
                "–ö–æ–¥": code,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                "–¶–µ–Ω–∞_–Ω–∞_–ø–æ–ª–∫–µ": 100.0
            })
        
        response = client.post("/forecast", json=payload)
        assert response.status_code == 200
        results = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑
        assert len(results) == len(extreme_cases) + 1
        
        # –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
        for i in range(1, len(results)):
            assert results[i]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] >= 0


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])

