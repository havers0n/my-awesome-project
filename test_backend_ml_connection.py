import requests
import json

def test_backend_ml_connection():
    print("üß™ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø BACKEND –ö ML –°–ï–†–í–ò–°–£")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
    print("\n1. –¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é...")
    try:
        ml_response = requests.get("http://localhost:8000/health")
        print(f"   ‚úÖ ML —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {ml_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå ML —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–∞
    print("\n2. –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        ml_payload = {
            "DaysCount": 7,
            "events": [
                {
                    "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                    "–ü–µ—Ä–∏–æ–¥": "2025-01-01",
                    "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ê–±—Ä–∏–∫–æ—Å–æ–≤—ã–π –∞—Ä–æ–º–∞—Ç 0,4–∫–≥",
                    "–ö–æ–¥": "CSV_1",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5,
                    "–¶–µ–Ω–∞": 100.0
                }
            ]
        }
        
        ml_forecast_response = requests.post(
            "http://localhost:8000/predict",
            headers={"Content-Type": "application/json"},
            data=json.dumps(ml_payload),
            timeout=30
        )
        
        if ml_forecast_response.status_code == 200:
            result = ml_forecast_response.json()
            print(f"   ‚úÖ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(result) if isinstance(result, list) else 'N/A'}")
        else:
            print(f"   ‚ùå ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∞: {ml_forecast_response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {ml_forecast_response.text}")
    except Exception as e:
        print(f"   ‚ùå ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend...")
    try:
        backend_response = requests.get("http://localhost:3000/health")
        print(f"   ‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω: {backend_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    print("\n4. –¢–µ—Å—Ç CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
    try:
        csv_products_response = requests.get("http://localhost:3000/api/forecast/csv-products")
        print(f"   –°—Ç–∞—Ç—É—Å: {csv_products_response.status_code}")
        if csv_products_response.status_code == 401:
            print("   ‚úÖ CSV –ø—Ä–æ–¥—É–∫—Ç—ã: –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
        else:
            print(f"   ‚ö†Ô∏è CSV –ø—Ä–æ–¥—É–∫—Ç—ã: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        print(f"   ‚ùå CSV –ø—Ä–æ–¥—É–∫—Ç—ã: –æ—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    print("\n5. –¢–µ—Å—Ç CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        csv_forecast_payload = {"DaysCount": 7}
        csv_forecast_response = requests.post(
            "http://localhost:3000/api/forecast/predict-csv",
            headers={"Content-Type": "application/json"},
            data=json.dumps(csv_forecast_payload),
            timeout=30
        )
        print(f"   –°—Ç–∞—Ç—É—Å: {csv_forecast_response.status_code}")
        if csv_forecast_response.status_code == 401:
            print("   ‚úÖ CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
        elif csv_forecast_response.status_code == 502:
            print("   ‚ùå CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: ML —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è backend")
            print(f"      –û—Ç–≤–µ—Ç: {csv_forecast_response.text}")
        else:
            print(f"   ‚ö†Ô∏è CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        print(f"   ‚ùå CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    test_backend_ml_connection() 