import requests
import json

def test_ml_connection_fix():
    print("üß™ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö ML –°–ï–†–í–ò–°–£ –° –ù–û–í–´–ú URL")
    print("=" * 55)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ localhost
    print("\n1. –¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ localhost...")
    try:
        ml_response = requests.get("http://localhost:8000/health")
        print(f"   ‚úÖ localhost:8000 –¥–æ—Å—Ç—É–ø–µ–Ω: {ml_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå localhost:8000 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ 127.0.0.1
    print("\n2. –¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ 127.0.0.1...")
    try:
        ml_response = requests.get("http://127.0.0.1:8000/health")
        print(f"   ‚úÖ 127.0.0.1:8000 –¥–æ—Å—Ç—É–ø–µ–Ω: {ml_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå 127.0.0.1:8000 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ localhost
    print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ localhost...")
    try:
        ml_payload = {
            "DaysCount": 7,
            "events": [
                {
                    "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                    "–ü–µ—Ä–∏–æ–¥": "2025-01-01",
                    "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ê–±—Ä–∏–∫–æ—Å–æ–≤—ã–π –∞—Ä–æ–º–∞—Ç 0,4–∫–≥",
                    "–ö–æ–¥": "CSV_1",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5,
                    "–¶–µ–Ω–∞": 100.0
                }
            ]
        }
        
        ml_forecast_response = requests.post(
            "http://localhost:8000/predict",
            headers={"Content-Type": "application/json"},
            data=json.dumps(ml_payload),
            timeout=30
        )
        
        if ml_forecast_response.status_code == 200:
            result = ml_forecast_response.json()
            print(f"   ‚úÖ localhost –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(result) if isinstance(result, list) else 'N/A'}")
        else:
            print(f"   ‚ùå localhost –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∞: {ml_forecast_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå localhost –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 127.0.0.1
    print("\n4. –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 127.0.0.1...")
    try:
        ml_forecast_response = requests.post(
            "http://127.0.0.1:8000/predict",
            headers={"Content-Type": "application/json"},
            data=json.dumps(ml_payload),
            timeout=30
        )
        
        if ml_forecast_response.status_code == 200:
            result = ml_forecast_response.json()
            print(f"   ‚úÖ 127.0.0.1 –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(result) if isinstance(result, list) else 'N/A'}")
        else:
            print(f"   ‚ùå 127.0.0.1 –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∞: {ml_forecast_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå 127.0.0.1 –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend...")
    try:
        backend_response = requests.get("http://localhost:3000/health")
        print(f"   ‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω: {backend_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    print("\n6. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    print("   üéØ –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
    print("   üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5173/sales-forecast-csv")

if __name__ == "__main__":
    test_ml_connection_fix() 