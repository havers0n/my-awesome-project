#!/usr/bin/env node

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

const log = (color, message) => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const runCommand = (command, description) => {
  log('blue', `\nüîÑ ${description}...`);
  log('dim', `–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`);
  
  try {
    const output = execSync(command, { 
      stdio: 'pipe', 
      encoding: 'utf8',
      cwd: process.cwd()
    });
    
    log('green', `‚úÖ ${description} - —É—Å–ø–µ—à–Ω–æ`);
    return { success: true, output };
  } catch (error) {
    log('red', `‚ùå ${description} - –æ—à–∏–±–∫–∞`);
    console.error(error.stdout || error.message);
    return { success: false, error: error.message };
  }
};

const checkFileExists = (filePath) => {
  const fullPath = path.resolve(filePath);
  return fs.existsSync(fullPath);
};

const generateReport = (results) => {
  const timestamp = new Date().toISOString();
  const reportDir = path.join(process.cwd(), 'reports');
  
  if (!fs.existsSync(reportDir)) {
    fs.mkdirSync(reportDir, { recursive: true });
  }
  
  const reportFile = path.join(reportDir, `performance-test-report-${timestamp.replace(/[:.]/g, '-')}.md`);
  
  const report = `# Performance Test Report

**–î–∞—Ç–∞**: ${timestamp}
**–í–µ—Ä—Å–∏—è**: ${process.env.npm_package_version || 'unknown'}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

${results.map(result => `
### ${result.name}
- **–°—Ç–∞—Ç—É—Å**: ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: ${result.duration}ms
${result.error ? `- **–û—à–∏–±–∫–∞**: ${result.error}` : ''}
${result.coverage ? `- **–ü–æ–∫—Ä—ã—Ç–∏–µ**: ${result.coverage}` : ''}
`).join('')}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${results.some(r => !r.success) ? `
‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö:**
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤
` : `
‚úÖ **–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!**
- Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ
- UX —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
`}

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. ${results.some(r => !r.success) ? '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É'}
2. ${results.find(r => r.name.includes('E2E'))?.success ? '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å E2E —Ç–µ—Å—Ç—ã –≤ CI/CD' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å E2E —Ç–µ—Å—Ç—ã'}
3. ${results.find(r => r.name.includes('Performance'))?.success ? '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ' : '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
`;
  
  fs.writeFileSync(reportFile, report);
  log('green', `üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
};

const main = async () => {
  log('bright', 'üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Drag & Drop');
  
  const results = [];
  const startTime = Date.now();
  
  // 1. Unit —Ç–µ—Å—Ç—ã
  const unitTestStart = Date.now();
  const unitTestResult = runCommand(
    'npm run test -- --coverage --reporter=verbose src/hooks/__tests__/useDragDropUX.test.ts src/components/common/__tests__/DragPreview.test.tsx',
    'Unit —Ç–µ—Å—Ç—ã –¥–ª—è drag & drop –ª–æ–≥–∏–∫–∏'
  );
  results.push({
    name: 'Unit Tests',
    success: unitTestResult.success,
    duration: Date.now() - unitTestStart,
    error: unitTestResult.error,
    coverage: unitTestResult.success ? '–í–∫–ª—é—á–µ–Ω–æ' : undefined
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Playwright
  if (checkFileExists('playwright.config.ts')) {
    const playwrightTestStart = Date.now();
    const playwrightResult = runCommand(
      'npx playwright test tests/e2e/drag-drop.spec.ts --reporter=html',
      'E2E —Ç–µ—Å—Ç—ã —Å Playwright'
    );
    results.push({
      name: 'E2E Tests (Playwright)',
      success: playwrightResult.success,
      duration: Date.now() - playwrightTestStart,
      error: playwrightResult.error
    });
  } else {
    log('yellow', '‚ö†Ô∏è Playwright –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã');
    results.push({
      name: 'E2E Tests (Playwright)',
      success: false,
      duration: 0,
      error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const perfTestStart = Date.now();
  const perfTestResult = runCommand(
    'npm run test -- --reporter=verbose --run src/utils/performance/',
    '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
  );
  results.push({
    name: 'Performance Tests',
    success: perfTestResult.success,
    duration: Date.now() - perfTestStart,
    error: perfTestResult.error
  });
  
  // 4. –õ–∏–Ω—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
  const lintStart = Date.now();
  const lintResult = runCommand(
    'npm run lint -- --ext .ts,.tsx src/components/common/DragPreview.tsx src/hooks/useDragDropUX.ts src/components/optimized/ src/components/lazy/',
    '–õ–∏–Ω—Ç–∏–Ω–≥ drag & drop –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
  );
  results.push({
    name: 'Linting',
    success: lintResult.success,
    duration: Date.now() - lintStart,
    error: lintResult.error
  });
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript
  const typeCheckStart = Date.now();
  const typeCheckResult = runCommand(
    'npx tsc --noEmit --project tsconfig.json',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript'
  );
  results.push({
    name: 'Type Check',
    success: typeCheckResult.success,
    duration: Date.now() - typeCheckStart,
    error: typeCheckResult.error
  });
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ bundle size (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  if (checkFileExists('rollup.config.js') || checkFileExists('vite.config.ts')) {
    const bundleStart = Date.now();
    const bundleResult = runCommand(
      'npm run build -- --mode=production',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ bundle'
    );
    results.push({
      name: 'Bundle Size Check',
      success: bundleResult.success,
      duration: Date.now() - bundleStart,
      error: bundleResult.error
    });
  }
  
  const totalTime = Date.now() - startTime;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateReport(results);
  
  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
  log('bright', '\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const duration = `${result.duration}ms`;
    log('dim', `${status} ${result.name} (${duration})`);
  });
  
  const successCount = results.filter(r => r.success).length;
  const totalCount = results.length;
  
  log('bright', `\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
  log('dim', `‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
  
  // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (successCount === totalCount) {
    log('green', '\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! Drag & Drop –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.');
  } else {
    log('yellow', '\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    const failedTests = results.filter(r => !r.success);
    failedTests.forEach(test => {
      log('red', `‚ùå ${test.name}: ${test.error}`);
    });
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('blue', '\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  log('dim', '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.memo –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö re-renders');
  log('dim', '‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ lazy loading –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤');
  log('dim', '‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ Web Vitals (FCP, LCP, CLS) –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
  log('dim', '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CI/CD –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
  
  // –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  log('cyan', '\nüîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  log('dim', '‚Ä¢ npm run test:ui - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ UI —Ä–µ–∂–∏–º–µ');
  log('dim', '‚Ä¢ npm run test:e2e:ui - –∑–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ –≤ UI —Ä–µ–∂–∏–º–µ');
  log('dim', '‚Ä¢ npm run test:coverage - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏');
  log('dim', '‚Ä¢ npm run build -- --analyze - –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ bundle');
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
  process.exit(successCount === totalCount ? 0 : 1);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log('red', `‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  log('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log('red', `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
  process.exit(1);
});
