import React, { useEffect, useState } from 'react';\nimport { useLayoutHistory } from '../hooks/useLayoutHistory';\nimport { useAutoSave } from '../hooks/useAutoSave';\nimport { useLayoutSync } from '../hooks/useLayoutSync';\nimport type { LayoutItem } from '../store/layoutStore';\nimport { Undo, Redo, Save, Wifi, WifiOff, AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface LayoutManagerProps {\n  children?: React.ReactNode;\n}\n\nconst LayoutManager: React.FC<LayoutManagerProps> = ({ children }) => {\n  const {\n    layout,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n    updateLayout,\n    addItem,\n    removeItem,\n    updateItem,\n    clearHistory,\n    historySize,\n    currentIndex,\n  } = useLayoutHistory();\n\n  const {\n    save,\n    load,\n    isDirty,\n    lastSaved,\n    isEnabled: autoSaveEnabled,\n    setEnabled: setAutoSaveEnabled,\n    forceSave,\n  } = useAutoSave({\n    enabled: true,\n    interval: 3000,\n    onSave: () => console.log('Auto-saved successfully'),\n    onError: (error) => console.error('Auto-save failed:', error),\n  });\n\n  const {\n    isConnected,\n    sync,\n    disconnect,\n    connect,\n    syncStatus,\n  } = useLayoutSync({\n    enabled: true,\n    onConnect: () => console.log('WebSocket connected'),\n    onDisconnect: () => console.log('WebSocket disconnected'),\n    onError: (error) => console.error('WebSocket error:', error),\n    onSync: (syncedLayout) => console.log('Layout synced:', syncedLayout),\n  });\n\n  const [showControls, setShowControls] = useState(true);\n\n  // Load layout on mount\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  // Sample layout items for demonstration\n  const sampleItems: LayoutItem[] = [\n    {\n      id: 'item1',\n      x: 0,\n      y: 0,\n      w: 4,\n      h: 3,\n      component: 'DashboardCard',\n      props: { title: 'Sales Overview', type: 'chart' },\n    },\n    {\n      id: 'item2',\n      x: 4,\n      y: 0,\n      w: 4,\n      h: 3,\n      component: 'DashboardCard',\n      props: { title: 'User Analytics', type: 'metric' },\n    },\n    {\n      id: 'item3',\n      x: 8,\n      y: 0,\n      w: 4,\n      h: 3,\n      component: 'DashboardCard',\n      props: { title: 'Revenue', type: 'number' },\n    },\n  ];\n\n  const handleAddSampleItem = () => {\n    const newItem: LayoutItem = {\n      id: `item${Date.now()}`,\n      x: Math.floor(Math.random() * 8),\n      y: Math.floor(Math.random() * 8),\n      w: 4,\n      h: 3,\n      component: 'DashboardCard',\n      props: { title: `New Item ${Date.now()}`, type: 'chart' },\n    };\n    addItem(newItem);\n  };\n\n  const handleLoadSampleLayout = () => {\n    updateLayout(sampleItems);\n  };\n\n  const handleClearLayout = () => {\n    updateLayout([]);\n  };\n\n  const formatLastSaved = (timestamp: number) => {\n    const now = Date.now();\n    const diff = now - timestamp;\n    const seconds = Math.floor(diff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (seconds < 60) return `${seconds}s ago`;\n    if (minutes < 60) return `${minutes}m ago`;\n    return `${hours}h ago`;\n  };\n\n  const getSyncStatusIcon = () => {\n    switch (syncStatus) {\n      case 'syncing':\n        return <Wifi className=\"w-4 h-4 text-yellow-500 animate-pulse\" />;\n      case 'success':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'error':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return isConnected ? (\n          <Wifi className=\"w-4 h-4 text-green-500\" />\n        ) : (\n          <WifiOff className=\"w-4 h-4 text-gray-500\" />\n        );\n    }\n  };\n\n  const getSyncStatusText = () => {\n    if (!isConnected) return 'Disconnected';\n    \n    switch (syncStatus) {\n      case 'syncing':\n        return 'Syncing...';\n      case 'success':\n        return 'Synced';\n      case 'error':\n        return 'Sync Error';\n      default:\n        return 'Connected';\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Control Panel */}\n      {showControls && (\n        <div className=\"fixed top-4 right-4 z-50 bg-white rounded-lg shadow-lg border p-4 min-w-[300px]\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">Layout Manager</h3>\n            <button\n              onClick={() => setShowControls(false)}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              ×\n            </button>\n          </div>\n\n          {/* History Controls */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">History</h4>\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={undo}\n                disabled={!canUndo}\n                className=\"flex items-center gap-1 px-3 py-1 text-sm bg-gray-100 rounded disabled:opacity-50 hover:bg-gray-200 disabled:hover:bg-gray-100\"\n              >\n                <Undo className=\"w-4 h-4\" />\n                Undo\n              </button>\n              <button\n                onClick={redo}\n                disabled={!canRedo}\n                className=\"flex items-center gap-1 px-3 py-1 text-sm bg-gray-100 rounded disabled:opacity-50 hover:bg-gray-200 disabled:hover:bg-gray-100\"\n              >\n                <Redo className=\"w-4 h-4\" />\n                Redo\n              </button>\n              <span className=\"text-xs text-gray-500\">\n                {currentIndex + 1}/{historySize}\n              </span>\n            </div>\n          </div>\n\n          {/* Save Controls */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Save</h4>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <button\n                onClick={forceSave}\n                className=\"flex items-center gap-1 px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n              >\n                <Save className=\"w-4 h-4\" />\n                Save Now\n              </button>\n              <label className=\"flex items-center gap-1 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={autoSaveEnabled}\n                  onChange={(e) => setAutoSaveEnabled(e.target.checked)}\n                  className=\"rounded\"\n                />\n                Auto-save\n              </label>\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              {isDirty ? 'Unsaved changes' : `Last saved: ${formatLastSaved(lastSaved)}`}\n            </div>\n          </div>\n\n          {/* Sync Status */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Sync Status</h4>\n            <div className=\"flex items-center gap-2\">\n              {getSyncStatusIcon()}\n              <span className=\"text-sm\">{getSyncStatusText()}</span>\n              {!isConnected && (\n                <button\n                  onClick={connect}\n                  className=\"ml-auto px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n                >\n                  Reconnect\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Layout Controls */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Layout</h4>\n            <div className=\"flex flex-col gap-2\">\n              <button\n                onClick={handleAddSampleItem}\n                className=\"px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200\"\n              >\n                Add Item\n              </button>\n              <button\n                onClick={handleLoadSampleLayout}\n                className=\"px-3 py-1 text-sm bg-yellow-100 text-yellow-700 rounded hover:bg-yellow-200\"\n              >\n                Load Sample\n              </button>\n              <button\n                onClick={handleClearLayout}\n                className=\"px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200\"\n              >\n                Clear All\n              </button>\n              <button\n                onClick={clearHistory}\n                className=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n              >\n                Clear History\n              </button>\n            </div>\n          </div>\n\n          {/* Layout Info */}\n          <div className=\"text-xs text-gray-500 border-t pt-2\">\n            <div>Items: {layout.length}</div>\n            <div>History: {historySize} entries</div>\n            <div>Current: {currentIndex + 1}</div>\n          </div>\n        </div>\n      )}\n\n      {/* Toggle Button */}\n      {!showControls && (\n        <button\n          onClick={() => setShowControls(true)}\n          className=\"fixed top-4 right-4 z-50 bg-white rounded-lg shadow-lg border p-2 hover:bg-gray-50\"\n        >\n          <div className=\"w-6 h-6 flex items-center justify-center\">\n            ⚙️\n          </div>\n        </button>\n      )}\n\n      {/* Layout Display */}\n      <div className=\"p-4\">\n        <h2 className=\"text-xl font-semibold mb-4\">Dashboard Layout</h2>\n        \n        {layout.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">\n            <p>No layout items. Add some items to get started!</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-12 gap-4\">\n            {layout.map((item) => (\n              <div\n                key={item.id}\n                className=\"bg-white rounded-lg shadow-md border p-4 hover:shadow-lg transition-shadow\"\n                style={{\n                  gridColumn: `span ${item.w}`,\n                  gridRow: `span ${Math.max(1, Math.floor(item.h / 2))}`,\n                }}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-medium\">{item.props?.title || item.component}</h3>\n                  <button\n                    onClick={() => removeItem(item.id)}\n                    className=\"text-red-500 hover:text-red-700 text-sm\"\n                  >\n                    ×\n                  </button>\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  <div>Position: {item.x}, {item.y}</div>\n                  <div>Size: {item.w}×{item.h}</div>\n                  <div>Type: {item.props?.type || 'unknown'}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {children}\n    </div>\n  );\n};\n\nexport default LayoutManager;
