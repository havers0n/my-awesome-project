import { useCallback, useState, useEffect } from 'react';
import { DashboardLayoutItem, DashboardWidget, UseDashboardLayoutReturn } from '../types/dashboard.types';
import { getWidgetById } from '../widgetRegistry';

interface UseDashboardLayoutProps {
  layout: DashboardLayoutItem[];
  widgets: Record<string, DashboardWidget>;
  onLayoutChange: (layout: DashboardLayoutItem[]) => void;
  onWidgetsChange: (widgets: Record<string, DashboardWidget>) => void;
}

export function useDashboardLayout({
  layout,
  widgets,
  onLayoutChange,
  onWidgetsChange,
}: UseDashboardLayoutProps): UseDashboardLayoutReturn {

  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const [currentLayout, setCurrentLayout] = useState<DashboardLayoutItem[]>(layout);
  const [currentWidgets, setCurrentWidgets] = useState<Record<string, DashboardWidget>>(widgets);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–ø—Å–∞–º–∏
  useEffect(() => {
    setCurrentLayout(layout);
  }, [layout]);

  useEffect(() => {
    setCurrentWidgets(widgets);
  }, [widgets]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞
  const updateLayout = useCallback((newLayout: DashboardLayoutItem[]) => {
    console.log('üîÑ [useDashboardLayout] updateLayout called:', newLayout);
    setCurrentLayout(newLayout);
    onLayoutChange(newLayout);
  }, [onLayoutChange]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
  const addWidget = useCallback((widgetType: string, position?: { x: number; y: number }) => {
    console.log('üî• [useDashboardLayout] START addWidget');
    console.log('üî• [useDashboardLayout] Widget type:', widgetType);
    console.log('üî• [useDashboardLayout] Current layout:', currentLayout);
    console.log('üî• [useDashboardLayout] Current widgets:', currentWidgets);
    
    const widgetDefinition = getWidgetById(widgetType);
    if (!widgetDefinition) {
      console.error('‚ùå [useDashboardLayout] Widget type not found:', widgetType);
      return;
    }

    console.log('‚úÖ [useDashboardLayout] Widget definition found:', widgetDefinition);

    const widgetId = `widget-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    console.log('üÜî [useDashboardLayout] Generated widget ID:', widgetId);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Å–µ—Ç–∫–µ
    const { x, y } = position || findFreePosition(currentLayout, widgetDefinition.defaultSize);
    console.log('üìç [useDashboardLayout] Widget position:', { x, y });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞–∫–µ—Ç–∞
    const newLayoutItem: DashboardLayoutItem = {
      i: widgetId, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å id –Ω–∞ i
      x,
      y,
      w: widgetDefinition.defaultSize.w,
      h: widgetDefinition.defaultSize.h,
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
    const newWidget: DashboardWidget = {
      id: widgetId,
      widgetType,
      config: {},
      visible: true,
    };

    console.log('üì¶ [useDashboardLayout] New layout item:', newLayoutItem);
    console.log('üéØ [useDashboardLayout] New widget:', newWidget);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const newLayout = [...currentLayout, newLayoutItem];
    const newWidgets = { ...currentWidgets, [widgetId]: newWidget };
    
    console.log('üìä [useDashboardLayout] Final layout:', newLayout);
    console.log('üîß [useDashboardLayout] Final widgets:', newWidgets);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setCurrentLayout(newLayout);
    setCurrentWidgets(newWidgets);
    
    console.log('üöÄ [useDashboardLayout] Calling onLayoutChange...');
    onLayoutChange(newLayout);
    
    console.log('üöÄ [useDashboardLayout] Calling onWidgetsChange...');
    onWidgetsChange(newWidgets);
    
    console.log('‚úÖ [useDashboardLayout] END addWidget');
  }, [currentLayout, currentWidgets, onLayoutChange, onWidgetsChange]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  const removeWidget = useCallback((widgetId: string) => {
    console.log('üóëÔ∏è [useDashboardLayout] removeWidget called:', widgetId);
    const newLayout = currentLayout.filter(item => item.i !== widgetId); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å id –Ω–∞ i
    const newWidgets = { ...currentWidgets };
    delete newWidgets[widgetId];

    setCurrentLayout(newLayout);
    setCurrentWidgets(newWidgets);
    
    onLayoutChange(newLayout);
    onWidgetsChange(newWidgets);
  }, [currentLayout, currentWidgets, onLayoutChange, onWidgetsChange]);

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
  const resizeWidget = useCallback((widgetId: string, size: { w: number; h: number }) => {
    console.log('üìè [useDashboardLayout] resizeWidget called:', widgetId, size);
    const newLayout = currentLayout.map(item => 
      item.i === widgetId  // –ò–∑–º–µ–Ω–µ–Ω–æ —Å id –Ω–∞ i
        ? { ...item, w: size.w, h: size.h }
        : item
    );
    
    setCurrentLayout(newLayout);
    onLayoutChange(newLayout);
  }, [currentLayout, onLayoutChange]);

  return {
    layout: currentLayout,
    widgets: currentWidgets,
    updateLayout,
    addWidget,
    removeWidget,
    resizeWidget,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ —Å–µ—Ç–∫–µ
function findFreePosition(
  layout: DashboardLayoutItem[], 
  size: { w: number; h: number }
): { x: number; y: number } {
  const gridWidth = 12; // –®–∏—Ä–∏–Ω–∞ —Å–µ—Ç–∫–∏
  
  // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø–æ–∑–∏—Ü–∏–∏ (0, 0)
  for (let y = 0; y < 100; y++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ 100 —Å—Ç—Ä–æ–∫–∞–º–∏
    for (let x = 0; x <= gridWidth - size.w; x++) {
      const position = { x, y };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
      const isPositionFree = !layout.some(item => 
        isOverlapping(
          { x, y, w: size.w, h: size.h },
          { x: item.x, y: item.y, w: item.w, h: item.h }
        )
      );
      
      if (isPositionFree) {
        return position;
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
  const maxY = Math.max(...layout.map(item => item.y + item.h), 0);
  return { x: 0, y: maxY };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
function isOverlapping(
  rect1: { x: number; y: number; w: number; h: number },
  rect2: { x: number; y: number; w: number; h: number }
): boolean {
  return !(
    rect1.x + rect1.w <= rect2.x ||
    rect2.x + rect2.w <= rect1.x ||
    rect1.y + rect1.h <= rect2.y ||
    rect2.y + rect2.h <= rect1.y
  );
} 