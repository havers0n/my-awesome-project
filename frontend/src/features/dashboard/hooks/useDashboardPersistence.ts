import { useState, useEffect, useCallback } from 'react';
import { DashboardConfig, DEFAULT_DASHBOARD_CONFIG, UseDashboardPersistenceReturn } from '../types/dashboard.types';

const STORAGE_KEY = 'dashboard-config-v3'; // –ò–∑–º–µ–Ω–µ–Ω –∫–ª—é—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

export function useDashboardPersistence(): UseDashboardPersistenceReturn {
  const [config, setConfig] = useState<DashboardConfig>(DEFAULT_DASHBOARD_CONFIG);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const isValidConfig = (config: DashboardConfig): boolean => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ layout items –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
      for (const layoutItem of config.layout) {
        if (!config.widgets[layoutItem.i]) {
          console.warn(`Layout item ${layoutItem.i} has no corresponding widget`);
          return false;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      for (const [widgetId, widget] of Object.entries(config.widgets)) {
        if (!widget.id || !widget.widgetType || typeof widget.visible !== 'boolean') {
          console.warn(`Widget ${widgetId} has invalid structure`);
          return false;
        }
      }
      
      return true;
    } catch (err) {
      console.error('Error validating config:', err);
      return false;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    try {
      setIsLoading(true);
      const savedConfig = localStorage.getItem(STORAGE_KEY);
      
      console.log('üîÑ Loading dashboard config from localStorage:', savedConfig);
      
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig) as DashboardConfig;
        
        console.log('üìã Parsed config:', parsedConfig);
        console.log('üìã Default config version:', DEFAULT_DASHBOARD_CONFIG.version);
        console.log('üìã Saved config version:', parsedConfig.version);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (parsedConfig.version === DEFAULT_DASHBOARD_CONFIG.version && isValidConfig(parsedConfig)) {
          console.log('‚úÖ Using saved config');
          setConfig(parsedConfig);
        } else {
          // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          console.warn('‚ö†Ô∏è Dashboard config invalid or version mismatch, using default config');
          setConfig(DEFAULT_DASHBOARD_CONFIG);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          localStorage.setItem(STORAGE_KEY, JSON.stringify(DEFAULT_DASHBOARD_CONFIG));
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('üÜï No saved config found, using default config');
        setConfig(DEFAULT_DASHBOARD_CONFIG);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        localStorage.setItem(STORAGE_KEY, JSON.stringify(DEFAULT_DASHBOARD_CONFIG));
      }
      
      setError(null);
    } catch (err) {
      console.error('‚ùå Error loading dashboard config:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞');
      setConfig(DEFAULT_DASHBOARD_CONFIG);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      localStorage.setItem(STORAGE_KEY, JSON.stringify(DEFAULT_DASHBOARD_CONFIG));
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ localStorage
  const saveConfig = useCallback((newConfig: DashboardConfig) => {
    try {
      console.log('üíæ Saving dashboard config:', newConfig);
      localStorage.setItem(STORAGE_KEY, JSON.stringify(newConfig));
      setConfig(newConfig);
      setError(null);
    } catch (err) {
      console.error('‚ùå Error saving dashboard config:', err);
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞');
    }
  }, []);

  // –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetConfig = useCallback(() => {
    try {
      console.log('üîÑ Resetting dashboard config to default');
      localStorage.removeItem(STORAGE_KEY);
      setConfig(DEFAULT_DASHBOARD_CONFIG);
      setError(null);
    } catch (err) {
      console.error('‚ùå Error resetting dashboard config:', err);
      setError('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞');
    }
  }, []);

  return {
    config,
    saveConfig,
    resetConfig,
    isLoading,
    error,
  };
} 