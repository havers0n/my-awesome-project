/**\n * React hook для работы с темами\n * \n * Предоставляет удобный интерфейс для управления темами\n * и отслеживания их изменений в React компонентах.\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  themeUtils,\n  initializeTokens,\n  getCurrentBreakpoint,\n  matchesBreakpoint,\n} from '../styles/tokens/utils';\nimport type { ThemeMode, ThemeConfig } from '../styles/tokens/types';\n\n// ============================================================================\n// THEME HOOK - Основной хук для работы с темами\n// ============================================================================\n\nexport interface UseThemeReturn {\n  /** Текущий режим темы */\n  theme: ThemeMode;\n  /** Конфигурация темы */\n  config: ThemeConfig;\n  /** Функция для установки темы */\n  setTheme: (mode: ThemeMode) => void;\n  /** Функция для переключения темы */\n  toggleTheme: () => void;\n  /** Функция для установки высококонтрастной темы */\n  setHighContrast: (enabled: boolean) => void;\n  /** Функция для установки режима уменьшенной анимации */\n  setReducedMotion: (enabled: boolean) => void;\n  /** Функция для применения полной конфигурации */\n  applyConfig: (config: ThemeConfig) => void;\n  /** Загружена ли тема */\n  isLoaded: boolean;\n}\n\n/**\n * Hook для управления темами\n */\nexport function useTheme(): UseThemeReturn {\n  const [theme, setThemeState] = useState<ThemeMode>('light');\n  const [config, setConfigState] = useState<ThemeConfig>({\n    mode: 'light',\n    highContrast: false,\n    reducedMotion: false,\n  });\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Инициализация\n  useEffect(() => {\n    initializeTokens();\n    const currentConfig = themeUtils.getThemeConfig();\n    setThemeState(currentConfig.mode);\n    setConfigState(currentConfig);\n    setIsLoaded(true);\n  }, []);\n\n  // Слушаем изменения системной темы\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'auto') {\n        const newConfig = themeUtils.getThemeConfig();\n        setConfigState(newConfig);\n      }\n    };\n\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => mediaQuery.removeEventListener('change', handleChange);\n    } else {\n      mediaQuery.addListener(handleChange);\n      return () => mediaQuery.removeListener(handleChange);\n    }\n  }, [theme]);\n\n  // Слушаем изменения предпочтений анимации\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      setConfigState(prev => ({\n        ...prev,\n        reducedMotion: e.matches,\n      }));\n    };\n\n    if (motionQuery.addEventListener) {\n      motionQuery.addEventListener('change', handleChange);\n      return () => motionQuery.removeEventListener('change', handleChange);\n    } else {\n      motionQuery.addListener(handleChange);\n      return () => motionQuery.removeListener(handleChange);\n    }\n  }, []);\n\n  const setTheme = useCallback((mode: ThemeMode) => {\n    themeUtils.applyTheme(mode);\n    setThemeState(mode);\n    setConfigState(prev => ({ ...prev, mode }));\n  }, []);\n\n  const toggleTheme = useCallback(() => {\n    const newTheme = themeUtils.toggleTheme();\n    setThemeState(newTheme);\n    setConfigState(prev => ({ ...prev, mode: newTheme }));\n  }, []);\n\n  const setHighContrast = useCallback((enabled: boolean) => {\n    themeUtils.setHighContrast(enabled);\n    setConfigState(prev => ({ ...prev, highContrast: enabled }));\n  }, []);\n\n  const setReducedMotion = useCallback((enabled: boolean) => {\n    themeUtils.setReducedMotion(enabled);\n    setConfigState(prev => ({ ...prev, reducedMotion: enabled }));\n  }, []);\n\n  const applyConfig = useCallback((newConfig: ThemeConfig) => {\n    themeUtils.applyThemeConfig(newConfig);\n    setThemeState(newConfig.mode);\n    setConfigState(newConfig);\n  }, []);\n\n  return {\n    theme,\n    config,\n    setTheme,\n    toggleTheme,\n    setHighContrast,\n    setReducedMotion,\n    applyConfig,\n    isLoaded,\n  };\n}\n\n// ============================================================================\n// BREAKPOINT HOOK - Hook для работы с breakpoints\n// ============================================================================\n\nexport interface UseBreakpointReturn {\n  /** Текущий breakpoint */\n  current: string | null;\n  /** Функции для проверки конкретных breakpoints */\n  is: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n    wide: boolean;\n    sm: boolean;\n    md: boolean;\n    lg: boolean;\n    xl: boolean;\n    '2xl': boolean;\n  };\n  /** Больше указанного breakpoint */\n  above: (breakpoint: string) => boolean;\n  /** Меньше указанного breakpoint */\n  below: (breakpoint: string) => boolean;\n}\n\n/**\n * Hook для работы с responsive breakpoints\n */\nexport function useBreakpoint(): UseBreakpointReturn {\n  const [current, setCurrent] = useState<string | null>(null);\n  const [breakpoints, setBreakpoints] = useState({\n    mobile: false,\n    tablet: false,\n    desktop: false,\n    wide: false,\n    sm: false,\n    md: false,\n    lg: false,\n    xl: false,\n    '2xl': false,\n  });\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const updateBreakpoints = () => {\n      const currentBp = getCurrentBreakpoint();\n      setCurrent(currentBp);\n\n      setBreakpoints({\n        mobile: matchesBreakpoint('mobile'),\n        tablet: matchesBreakpoint('tablet'),\n        desktop: matchesBreakpoint('desktop'),\n        wide: matchesBreakpoint('wide'),\n        sm: matchesBreakpoint('sm'),\n        md: matchesBreakpoint('md'),\n        lg: matchesBreakpoint('lg'),\n        xl: matchesBreakpoint('xl'),\n        '2xl': matchesBreakpoint('2xl'),\n      });\n    };\n\n    updateBreakpoints();\n\n    const handleResize = () => {\n      updateBreakpoints();\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const above = useCallback((breakpoint: string) => {\n    return matchesBreakpoint(breakpoint as any);\n  }, []);\n\n  const below = useCallback((breakpoint: string) => {\n    return !matchesBreakpoint(breakpoint as any);\n  }, []);\n\n  return {\n    current,\n    is: breakpoints,\n    above,\n    below,\n  };\n}\n\n// ============================================================================\n// REDUCED MOTION HOOK - Hook для работы с prefers-reduced-motion\n// ============================================================================\n\nexport interface UseReducedMotionReturn {\n  /** Предпочитает ли пользователь уменьшенную анимацию */\n  prefersReducedMotion: boolean;\n  /** Должны ли анимации быть отключены */\n  shouldReduceMotion: boolean;\n}\n\n/**\n * Hook для определения предпочтений пользователя по анимации\n */\nexport function useReducedMotion(): UseReducedMotionReturn {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [shouldReduceMotion, setShouldReduceMotion] = useState(false);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const updateMotionPreference = () => {\n      const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n      const systemPrefers = mediaQuery.matches;\n      const userSetting = localStorage.getItem('reduced-motion') === 'true';\n      \n      setPrefersReducedMotion(systemPrefers);\n      setShouldReduceMotion(systemPrefers || userSetting);\n    };\n\n    updateMotionPreference();\n\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    const handleChange = () => {\n      updateMotionPreference();\n    };\n\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => mediaQuery.removeEventListener('change', handleChange);\n    } else {\n      mediaQuery.addListener(handleChange);\n      return () => mediaQuery.removeListener(handleChange);\n    }\n  }, []);\n\n  return {\n    prefersReducedMotion,\n    shouldReduceMotion,\n  };\n}\n\n// ============================================================================\n// SYSTEM PREFERENCES HOOK - Hook для системных предпочтений\n// ============================================================================\n\nexport interface UseSystemPreferencesReturn {\n  /** Предпочитает ли система темную тему */\n  prefersDarkMode: boolean;\n  /** Предпочитает ли пользователь уменьшенную анимацию */\n  prefersReducedMotion: boolean;\n  /** Предпочитает ли пользователь высокий контраст */\n  prefersHighContrast: boolean;\n  /** Предпочитает ли пользователь прозрачность */\n  prefersReducedTransparency: boolean;\n}\n\n/**\n * Hook для отслеживания системных предпочтений пользователя\n */\nexport function useSystemPreferences(): UseSystemPreferencesReturn {\n  const [preferences, setPreferences] = useState({\n    prefersDarkMode: false,\n    prefersReducedMotion: false,\n    prefersHighContrast: false,\n    prefersReducedTransparency: false,\n  });\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const updatePreferences = () => {\n      setPreferences({\n        prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n        prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n        prefersHighContrast: window.matchMedia('(prefers-contrast: high)').matches,\n        prefersReducedTransparency: window.matchMedia('(prefers-reduced-transparency: reduce)').matches,\n      });\n    };\n\n    updatePreferences();\n\n    const queries = [\n      window.matchMedia('(prefers-color-scheme: dark)'),\n      window.matchMedia('(prefers-reduced-motion: reduce)'),\n      window.matchMedia('(prefers-contrast: high)'),\n      window.matchMedia('(prefers-reduced-transparency: reduce)'),\n    ];\n\n    const handleChange = () => {\n      updatePreferences();\n    };\n\n    queries.forEach(query => {\n      if (query.addEventListener) {\n        query.addEventListener('change', handleChange);\n      } else {\n        query.addListener(handleChange);\n      }\n    });\n\n    return () => {\n      queries.forEach(query => {\n        if (query.removeEventListener) {\n          query.removeEventListener('change', handleChange);\n        } else {\n          query.removeListener(handleChange);\n        }\n      });\n    };\n  }, []);\n\n  return preferences;\n}\n\n// ============================================================================\n// DEFAULT EXPORT - Экспорт по умолчанию\n// ============================================================================\n\nexport default useTheme;"
