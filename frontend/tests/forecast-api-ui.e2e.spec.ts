import { test, expect } from '@playwright/test';

test.describe('Forecast API UI Testing', () => {
  test.beforeEach(async ({ page }) => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º dev server frontend –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await page.goto('http://localhost:5173');
  });

  test('Test Forecast API Page - All Buttons', async ({ page }) => {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    await page.goto('http://localhost:5173/test-forecast-api');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page).toHaveTitle(/Admin Dashboard/);
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // 1. –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "Test GET Forecast"
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Test GET Forecast"');
    const getButton = page.locator('button:has-text("Test GET Forecast")');
    await expect(getButton).toBeVisible();
    await getButton.click();
    
    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await page.waitForTimeout(2000);
    
    // 2. –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "Test POST Forecast"
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Test POST Forecast"');
    const postButton = page.locator('button:has-text("Test POST Forecast")');
    await expect(postButton).toBeVisible();
    await postButton.click();
    
    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await page.waitForTimeout(2000);
    
    // 3. –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "Test History"
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Test History"');
    const historyButton = page.locator('button:has-text("Test History")');
    await expect(historyButton).toBeVisible();
    await historyButton.click();
    
    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await page.waitForTimeout(2000);
    
    // 4. –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "Test Direct API"
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Test Direct API"');
    const directApiButton = page.locator('button:has-text("Test Direct API")');
    await expect(directApiButton).toBeVisible();
    await directApiButton.click();
    
    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await page.waitForTimeout(2000);
    
    console.log('‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  });

  test('Sales Forecast Page - Create New Forecast', async ({ page }) => {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–æ–¥–∞–∂
    await page.goto('http://localhost:5173/sales-forecast');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page).toHaveTitle(/Admin Dashboard/);
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–æ–¥–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    const createForecastSection = page.locator('text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑"').first();
    if (await createForecastSection.isVisible()) {
      console.log('‚úÖ –°–µ–∫—Ü–∏—è "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑" –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è –°–µ–∫—Ü–∏—è "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã');
      
      // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      const alternatives = [
        'input[type="number"]',
        'input[placeholder*="–¥–Ω–µ–π"]',
        'input[placeholder*="days"]',
        'button:has-text("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")',
        'button:has-text("Predict")',
        'button:has-text("Forecast")'
      ];
      
      for (const selector of alternatives) {
        const element = page.locator(selector);
        if (await element.isVisible()) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: ${selector}`);
        }
      }
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    const dayInput = page.locator('input[type="number"]').first();
    if (await dayInput.isVisible()) {
      console.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –Ω–∞–π–¥–µ–Ω–æ');
      
      // –í–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (7)
      await dayInput.fill('7');
      console.log('‚úÖ –í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: 7');
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"
      const predictButton = page.locator('button:has-text("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")').first();
      if (await predictButton.isVisible()) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å" –Ω–∞–π–¥–µ–Ω–∞');
        
        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"
        await predictButton.click();
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingIndicators = [
          'text="–ó–∞–≥—Ä—É–∑–∫–∞"',
          'text="Loading"',
          '.loading',
          '.spinner',
          '[data-testid="loading"]'
        ];
        
        for (const indicator of loadingIndicators) {
          const element = page.locator(indicator);
          if (await element.isVisible()) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏: ${indicator}`);
          }
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        await page.waitForTimeout(5000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        const successIndicators = [
          'text="–ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω"',
          'text="Success"',
          'text="–ì–æ—Ç–æ–≤–æ"',
          '.success',
          '[data-testid="success"]'
        ];
        
        for (const indicator of successIndicators) {
          const element = page.locator(indicator);
          if (await element.isVisible()) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞: ${indicator}`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        const chartElements = [
          'canvas',
          '.chart',
          '[data-testid="chart"]',
          '.apexcharts-svg'
        ];
        
        for (const chart of chartElements) {
          const element = page.locator(chart);
          if (await element.isVisible()) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞: ${chart}`);
          }
        }
        
        console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  });
});
