#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
const testConfigs = {
  'all': {
    command: 'playwright test',
    description: '–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤'
  },
  'auth': {
    command: 'playwright test auth-flow.e2e.spec.ts',
    description: '–¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
  },
  'forecast': {
    command: 'playwright test sales-forecast-flow.e2e.spec.ts',
    description: '–¢–µ—Å—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂'
  },
  'inventory': {
    command: 'playwright test out-of-stock.e2e.spec.ts',
    description: '–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º'
  },
  'dashboard': {
    command: 'playwright test dashboards-reports.e2e.spec.ts',
    description: '–¢–µ—Å—Ç—ã –¥–∞—à–±–æ—Ä–¥–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤'
  },
  'export': {
    command: 'playwright test export-mobile.e2e.spec.ts --grep "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"',
    description: '–¢–µ—Å—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö'
  },
  'mobile': {
    command: 'playwright test export-mobile.e2e.spec.ts --grep "–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å"',
    description: '–¢–µ—Å—Ç—ã –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏'
  },
  'performance': {
    command: 'playwright test performance.e2e.spec.ts',
    description: '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
  },
  'parallel': {
    command: 'playwright test --workers=4',
    description: '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤'
  },
  'headed': {
    command: 'playwright test --headed',
    description: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞'
  },
  'debug': {
    command: 'playwright test --debug',
    description: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏'
  },
  'chromium': {
    command: 'playwright test --project=chromium',
    description: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤ Chromium'
  },
  'firefox': {
    command: 'playwright test --project=firefox',
    description: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤ Firefox'
  },
  'webkit': {
    command: 'playwright test --project=webkit',
    description: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤ WebKit'
  },
  'mobile-devices': {
    command: 'playwright test --project="Mobile Chrome" --project="Mobile Safari"',
    description: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö'
  },
  'update-snapshots': {
    command: 'playwright test --update-snapshots',
    description: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤'
  },
  'report': {
    command: 'playwright show-report',
    description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
async function runCommand(command) {
  return new Promise((resolve, reject) => {
    const [cmd, ...args] = command.split(' ');
    const child = spawn(cmd, args, {
      stdio: 'inherit',
      shell: true,
      cwd: process.cwd()
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${code}`));
      }
    });

    child.on('error', reject);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function createResultDirectories() {
  const dirs = [
    'test-results',
    'test-results/screenshots',
    'test-results/lighthouse',
    'test-results/responsive',
    'tests/.auth'
  ];

  for (const dir of dirs) {
    await fs.mkdir(path.join(process.cwd(), dir), { recursive: true });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function cleanOldResults() {
  const testResultsDir = path.join(process.cwd(), 'test-results');
  try {
    const files = await fs.readdir(testResultsDir);
    const now = Date.now();
    const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π

    for (const file of files) {
      const filePath = path.join(testResultsDir, file);
      const stats = await fs.stat(filePath);
      
      if (now - stats.mtime.getTime() > maxAge) {
        await fs.unlink(filePath);
        console.log(`–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const testType = args[0] || 'all';

  console.log('üöÄ E2E Test Runner');
  console.log('==================\n');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
  if (testType === 'help' || testType === '--help' || testType === '-h') {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run e2e:[—Ç–∏–ø]\n');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:');
    for (const [key, config] of Object.entries(testConfigs)) {
      console.log(`  ${key.padEnd(20)} - ${config.description}`);
    }
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  if (!testConfigs[testType]) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: ${testType}`);
    console.log('\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "npm run e2e:help" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π');
    process.exit(1);
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await createResultDirectories();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await cleanOldResults();

    const config = testConfigs[testType];
    console.log(`üìã –ó–∞–ø—É—Å–∫: ${config.description}`);
    console.log(`üìù –ö–æ–º–∞–Ω–¥–∞: ${config.command}\n`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await runCommand(config.command);

    console.log('\n‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç
    if (testType !== 'report') {
      console.log('\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run e2e:report');
    }
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
