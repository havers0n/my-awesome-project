import requests
import json
import time

def test_full_integration():
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò CSV –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # ML —Å–µ—Ä–≤–∏—Å
    try:
        ml_response = requests.get("http://localhost:8000/health")
        print(f"   ‚úÖ ML —Å–µ—Ä–≤–∏—Å (–ø–æ—Ä—Ç 8000): {ml_response.status_code}")
    except:
        print("   ‚ùå ML —Å–µ—Ä–≤–∏—Å (–ø–æ—Ä—Ç 8000): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # Backend —Å–µ—Ä–≤–∏—Å
    try:
        backend_response = requests.get("http://localhost:3000/health")
        print(f"   ‚úÖ Backend —Å–µ—Ä–≤–∏—Å (–ø–æ—Ä—Ç 3000): {backend_response.status_code}")
    except:
        print("   ‚ùå Backend —Å–µ—Ä–≤–∏—Å (–ø–æ—Ä—Ç 3000): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # Frontend —Å–µ—Ä–≤–∏—Å
    try:
        frontend_response = requests.get("http://localhost:5173/")
        print(f"   ‚úÖ Frontend —Å–µ—Ä–≤–∏—Å (–ø–æ—Ä—Ç 5173): {frontend_response.status_code}")
    except:
        print("   ‚ùå Frontend —Å–µ—Ä–≤–∏—Å (–ø–æ—Ä—Ç 5173): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\n2. –¢–µ—Å—Ç CSV —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)...")
    
    # –¢–µ—Å—Ç CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    try:
        csv_products_response = requests.get("http://localhost:3000/api/forecast/csv-products")
        if csv_products_response.status_code == 401:
            print("   ‚úÖ CSV –ø—Ä–æ–¥—É–∫—Ç—ã: –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
        else:
            print(f"   ‚ö†Ô∏è CSV –ø—Ä–æ–¥—É–∫—Ç—ã: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {csv_products_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå CSV –ø—Ä–æ–¥—É–∫—Ç—ã: –æ—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç CSV –º–µ—Ç—Ä–∏–∫
    try:
        csv_metrics_response = requests.get("http://localhost:3000/api/forecast/csv-metrics")
        if csv_metrics_response.status_code == 401:
            print("   ‚úÖ CSV –º–µ—Ç—Ä–∏–∫–∏: –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
        else:
            print(f"   ‚ö†Ô∏è CSV –º–µ—Ç—Ä–∏–∫–∏: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {csv_metrics_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå CSV –º–µ—Ç—Ä–∏–∫–∏: –æ—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        csv_forecast_payload = {"DaysCount": 7}
        csv_forecast_response = requests.post(
            "http://localhost:3000/api/forecast/predict-csv",
            headers={"Content-Type": "application/json"},
            data=json.dumps(csv_forecast_payload)
        )
        if csv_forecast_response.status_code == 401:
            print("   ‚úÖ CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
        else:
            print(f"   ‚ö†Ô∏è CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {csv_forecast_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ - {e}")
    
    print("\n3. –¢–µ—Å—Ç ML —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–∞
    try:
        ml_payload = {
            "DaysCount": 7,
            "events": [
                {
                    "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                    "–ü–µ—Ä–∏–æ–¥": "2025-01-01",
                    "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ê–±—Ä–∏–∫–æ—Å–æ–≤—ã–π –∞—Ä–æ–º–∞—Ç 0,4–∫–≥",
                    "–ö–æ–¥": "CSV_1",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5,
                    "–¶–µ–Ω–∞": 100.0
                }
            ]
        }
        
        ml_forecast_response = requests.post(
            "http://localhost:8000/predict",
            headers={"Content-Type": "application/json"},
            data=json.dumps(ml_payload)
        )
        
        if ml_forecast_response.status_code == 200:
            result = ml_forecast_response.json()
            print(f"   ‚úÖ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: —É—Å–ø–µ—à–Ω–æ")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(result) if isinstance(result, list) else 'N/A'}")
        else:
            print(f"   ‚ùå ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ {ml_forecast_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ - {e}")
    
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSV —Ñ–∞–π–ª–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CSV —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    import os
    csv_path = "SalesPrediction-Vlad_branch/microservice/all_sku_metrics_1.csv"
    if os.path.exists(csv_path):
        print(f"   ‚úÖ CSV —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {csv_path}")
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        with open(csv_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
            if len(lines) > 1:
                print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(lines) - 1}")  # –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    else:
        print(f"   ‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
    
    print("\n5. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    services_ok = True
    
    # ML —Å–µ—Ä–≤–∏—Å
    try:
        requests.get("http://localhost:8000/health")
    except:
        services_ok = False
        print("   ‚ùå ML —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # Backend —Å–µ—Ä–≤–∏—Å
    try:
        requests.get("http://localhost:3000/health")
    except:
        services_ok = False
        print("   ‚ùå Backend —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if services_ok:
        print("   ‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüéâ –°–ò–°–¢–ï–ú–ê CSV –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:5173/")
        print("   2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("   3. –í —Å–∞–π–¥–±–∞—Ä–µ –≤—ã–±–µ—Ä–∏—Ç–µ: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ ‚Üí ML –º–æ–¥–µ–ª—å (CSV)")
        print("   4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑")
        print("\nüîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: http://localhost:5173/sales-forecast-csv")
    else:
        print("   ‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏")

if __name__ == "__main__":
    test_full_integration() 