const axios = require('axios');

const ML_SERVICE_URL = 'https://158.160.190.103:8002/predict';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç ML —Å–µ—Ä–≤–∏—Å –ê–ª–µ–∫—Å–µ—è
const testData = {
  "DaysCount": 30,
  "events": [
    {
      "Type": "–ü—Ä–æ–¥–∞–∂–∞",
      "–ü–µ—Ä–∏–æ–¥": "2025-07-15T00:00:00",
      "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ú–æ–ª–æ–∫–æ \"–î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ\" 1–ª",
      "–ö–æ–¥": "123456"
    }
  ]
};

async function testMLService() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞ –ê–ª–µ–∫—Å–µ—è...');
  console.log('URL:', ML_SERVICE_URL);
  console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(testData, null, 2));

  try {
    const response = await axios.post(ML_SERVICE_URL, testData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç –æ—Ç ML —Å–µ—Ä–≤–∏—Å–∞:');
    console.log('Status:', response.status);
    console.log('Data:', JSON.stringify(response.data, null, 2));
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ML —Å–µ—Ä–≤–∏—Å—É:');
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    } else if (error.request) {
      console.error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∞–¥—Ä–µ—Å—É:', ML_SERVICE_URL);
      console.error('- –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
      console.error('- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞');
    } else {
      console.error('–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
    
    return false;
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint
async function testHealthEndpoint() {
  const healthUrl = ML_SERVICE_URL.replace('/predict', '/health');
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint...');
  console.log('URL:', healthUrl);
  
  try {
    const response = await axios.get(healthUrl, {
      timeout: 5000
    });
    
    console.log('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω:');
    console.log('Status:', response.status);
    console.log('Data:', JSON.stringify(response.data, null, 2));
    
    return true;
  } catch (error) {
    console.error('‚ùå Health check failed:');
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    } else {
      console.error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç health endpoint');
    }
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞ –ê–ª–µ–∫—Å–µ—è...\n');
  
  const healthOk = await testHealthEndpoint();
  const predictOk = await testMLService();
  
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('Health endpoint:', healthOk ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('Predict endpoint:', predictOk ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  
  if (healthOk && predictOk) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ML —Å–µ—Ä–≤–∏—Å –ê–ª–µ–∫—Å–µ—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å ML —Å–µ—Ä–≤–∏—Å–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
  }
}

runTests(); 