const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// Simple logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Inventory products endpoint (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ë–î)
app.get('/api/inventory/products', async (req, res) => {
  console.log('üì¶ Fetching REAL data from database...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç supabase –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const { createClient } = require('@supabase/supabase-js');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const supabaseUrl = process.env.SUPABASE_URL || process.env.REACT_APP_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Supabase configuration missing');
      return res.status(500).json({ error: 'Database configuration missing' });
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 50; // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const offset = (page - 1) * limit;
    
    console.log(`üìÑ Pagination: page=${page}, limit=${limit}, offset=${offset}`);
    
    // –ó–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ products —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const { data: products, error, count } = await supabase
      .from('products')
      .select(`
        id,
        name,
        sku,
        price,
        organization_id
      `, { count: 'exact' })
      .range(offset, offset + limit - 1)
      .order('name', { ascending: true });
    
    if (error) {
      console.error('‚ùå Database error:', error);
      return res.status(500).json({ error: 'Database query failed', details: error.message });
    }
    
    if (!products || products.length === 0) {
      console.log('‚ö†Ô∏è No products found in database');
      return res.json([]);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã operations –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const productIds = products.map(p => p.id);
    
    const { data: stockData, error: stockError } = await supabase
      .from('operations')
      .select(`
        product_id,
        location_id,
        stock_on_hand,
        locations (
          id,
          name,
          type
        )
      `)
      .in('product_id', productIds)
      .not('stock_on_hand', 'is', null)
      .order('operation_date', { ascending: false });
    
    if (stockError) {
      console.warn('‚ö†Ô∏è Could not fetch stock data:', stockError.message);
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ –ª–æ–∫–∞—Ü–∏—è–º (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
    const stockByProduct = {};
    if (stockData) {
      stockData.forEach(stock => {
        const productId = stock.product_id;
        const locationId = stock.location_id;
        const key = `${productId}_${locationId}`;
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç-–ª–æ–∫–∞—Ü–∏—è (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è)
        if (!stockByProduct[key]) {
          stockByProduct[key] = {
            location_id: locationId,
            location_name: stock.locations?.name || `–õ–æ–∫–∞—Ü–∏—è ${locationId}`,
            location_type: stock.locations?.type || 'unknown',
            stock: stock.stock_on_hand || 0
          };
        }
      });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
    const formattedProducts = products.map((product) => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      const productStocks = Object.values(stockByProduct).filter(stock => 
        Object.keys(stockByProduct).some(key => 
          key.startsWith(`${product.id}_`) && stockByProduct[key] === stock
        )
      );
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
      if (productStocks.length === 0) {
        productStocks.push({
          location_id: 1,
          location_name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥',
          location_type: 'warehouse',
          stock: 0
        });
      }
      
      return {
        product_id: product.id,
        product_name: product.name,
        sku: product.sku || `SKU-${product.id}`,
        price: product.price || 0,
        organization_id: product.organization_id,
        stock_by_location: productStocks
      };
    });
    
    console.log(`‚úÖ Successfully fetched ${formattedProducts.length} of ${count} REAL products from database`);
    console.log(`üìä Pagination info: page ${page}, showing ${formattedProducts.length} items, total ${count}`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    res.json({
      data: formattedProducts,
      pagination: {
        page: page,
        limit: limit,
        total: count,
        totalPages: Math.ceil(count / limit),
        hasNext: page * limit < count,
        hasPrev: page > 1
      }
    });
    
  } catch (error) {
    console.error('üí• Unexpected error:', error);
    res.status(500).json({ 
      error: 'Failed to fetch products from database', 
      details: error instanceof Error ? error.message : String(error) 
    });
  }
});

// Test endpoint
app.get('/api/test', (req, res) => {
  console.log('Test endpoint called');
  res.json({ success: true, message: 'Real data server works', timestamp: new Date().toISOString() });
});

// Start the server
const PORT = 3000; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 3001 –Ω–∞ 3000 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
app.listen(PORT, () => {
  console.log(`‚úÖ Real data server running on port ${PORT}`);
  console.log(`üìä Products endpoint: http://localhost:${PORT}/api/inventory/products`);
}); 