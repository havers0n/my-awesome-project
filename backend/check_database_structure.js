require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function checkDatabaseStructure() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('='.repeat(50));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ PRODUCTS:');
    const { data: products, error: productsError } = await supabaseAdmin
      .from('products')
      .select('*')
      .limit(3);
    
    if (productsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ products –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', productsError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products?.length || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤:`);
      products?.forEach(p => {
        console.log(`   - ${p.name} (ID: ${p.id}, ORG: ${p.organization_id})`);
      });
    }

    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ OPERATIONS:');
    const { data: operations, error: operationsError } = await supabaseAdmin
      .from('operations')
      .select('*')
      .limit(5);
    
    if (operationsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ operations –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', operationsError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${operations?.length || 0} –æ–ø–µ—Ä–∞—Ü–∏–π:`);
      operations?.forEach(op => {
        console.log(`   - ${op.operation_type}: ${op.quantity} (Product ID: ${op.product_id}, Loc: ${op.location_id})`);
      });
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
      const operationTypes = [...new Set(operations?.map(op => op.operation_type))];
      console.log(`   –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π: ${operationTypes.join(', ')}`);
    }

    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ LOCATIONS:');
    const { data: locations, error: locationsError } = await supabaseAdmin
      .from('locations')
      .select('*')
      .limit(5);
    
    if (locationsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ locations –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', locationsError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${locations?.length || 0} –ª–æ–∫–∞—Ü–∏–π:`);
      locations?.forEach(loc => {
        console.log(`   - ${loc.name} (ID: ${loc.id}, ORG: ${loc.organization_id})`);
      });
    }

    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–°–ï–• VIEW:');
    const { data: views, error: viewsError } = await supabaseAdmin
      .from('information_schema.views')
      .select('table_name, view_definition')
      .eq('table_schema', 'public')
      .like('table_name', '%stock%');
    
    if (viewsError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ VIEW:', viewsError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${views?.length || 0} VIEW —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å stock:`);
      views?.forEach(view => {
        console.log(`   - ${view.table_name}`);
      });
    }

    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø ORGANIZATION_ID = 1:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 1
    const { data: orgProducts, error: orgProductsError } = await supabaseAdmin
      .from('products')
      .select('*')
      .eq('organization_id', 1);
    
    console.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è ORG 1: ${orgProducts?.length || 0}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 1
    const { data: orgOperations, error: orgOperationsError } = await supabaseAdmin
      .from('operations')
      .select('*')
      .eq('organization_id', 1);
    
    console.log(`üìä –û–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è ORG 1: ${orgOperations?.length || 0}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 1
    const { data: orgLocations, error: orgLocationsError } = await supabaseAdmin
      .from('locations')
      .select('*')
      .eq('organization_id', 1);
    
    console.log(`üìç –õ–æ–∫–∞—Ü–∏–π –¥–ª—è ORG 1: ${orgLocations?.length || 0}`);

    console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:');
    
    if ((orgProducts?.length || 0) === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –ü–†–û–î–£–ö–¢–û–í –¥–ª—è organization_id = 1');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å organization_id –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ');
    }
    
    if ((orgOperations?.length || 0) === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –û–ü–ï–†–ê–¶–ò–ô –¥–ª—è organization_id = 1');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å organization_id –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ');
    }
    
    if ((orgLocations?.length || 0) === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –õ–û–ö–ê–¶–ò–ô –¥–ª—è organization_id = 1');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å organization_id –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ organization_id —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å
    const { data: existingOrgs, error: orgsError } = await supabaseAdmin
      .from('products')
      .select('organization_id')
      .limit(100);
    
    if (!orgsError && existingOrgs) {
      const uniqueOrgs = [...new Set(existingOrgs.map(p => p.organization_id))];
      console.log(`üè¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ organization_id –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: ${uniqueOrgs.join(', ')}`);
      
      if (uniqueOrgs.length > 0 && !uniqueOrgs.includes(1)) {
        console.log(`üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å organization_id = ${uniqueOrgs[0]} –≤–º–µ—Å—Ç–æ 1`);
      }
    }

    console.log('\n7Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ VIEW –∏–∑ CRITICAL_VIEWS_ISSUE_FOUND.md');
    console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å: supply, sale, write_off)');
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
checkDatabaseStructure(); 