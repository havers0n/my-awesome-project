require('dotenv').config();
const { getProducts } = require('./dist/controllers/inventoryController.js');

async function quickTest() {
  try {
    console.log('üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ö–û–ù–¢–†–û–õ–õ–ï–†–ê');
    console.log('='.repeat(40));
    
    const mockReq = {
      user: { organization_id: 1 },
      headers: {}
    };
    
    let responseData = null;
    
    const mockRes = {
      status: () => mockRes,
      json: (data) => { responseData = data; }
    };
    
    await getProducts(mockReq, mockRes);
    
    if (responseData && responseData.data) {
      const products = responseData.data;
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
      
      const withStock = products.filter(p => p.current_stock > 0);
      const withZeroStock = products.filter(p => p.current_stock === 0);
      
      console.log(`üì¶ –° –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0: ${withStock.length}`);
      console.log(`‚ùå –° –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: ${withZeroStock.length}`);
      
      if (withStock.length > 0) {
        console.log('\n‚úÖ –ü–†–ò–ú–ï–†–´ –° –û–°–¢–ê–¢–ö–ê–ú–ò:');
        withStock.slice(0, 3).forEach(p => {
          console.log(`  ${p.product_name}: ${p.current_stock}`);
        });
      }
      
      console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
      if (withStock.length > 0) {
        console.log('‚úÖ –ö–û–ù–¢–†–û–õ–õ–ï–† –†–ê–ë–û–¢–ê–ï–¢ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏!');
        console.log('‚û°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ backend');
      } else {
        console.log('‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–ª–∏');
        console.log('‚û°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –í backend');
      }
    } else {
      console.log('‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ');
    }
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error.message);
  }
}

quickTest(); 