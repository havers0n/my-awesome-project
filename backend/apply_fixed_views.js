require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');
const fs = require('fs');
const path = require('path');

async function applyFixedViews() {
  try {
    console.log('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö VIEW –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    const sqlPath = path.join(__dirname, '..', 'database', 'create_current_stock_view_FIXED.sql');
    const sqlScript = fs.readFileSync(sqlPath, 'utf8');
    
    console.log('üìñ SQL —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', sqlScript.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ rpc –≤—ã–∑–æ–≤ raw SQL
    console.log('‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞...');
    
    const { data, error } = await supabaseAdmin.rpc('exec_sql', {
      sql_query: sqlScript
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
      console.log('üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const commands = sqlScript
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.toUpperCase().startsWith('--'));
      
      console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
      
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i];
        if (command.toUpperCase() === 'BEGIN' || command.toUpperCase() === 'COMMIT') {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${command}`);
          continue;
        }
        
        console.log(`üî® –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${commands.length}: ${command.substring(0, 50)}...`);
        
        const { error: cmdError } = await supabaseAdmin.rpc('exec_sql', {
          sql_query: command
        });
        
        if (cmdError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, cmdError);
          throw cmdError;
        }
      }
      
      console.log('‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
    } else {
      console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', data);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ VIEW —Å–æ–∑–¥–∞–Ω—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö VIEW...');
    
    const { data: viewsCheck, error: viewsError } = await supabaseAdmin
      .from('information_schema.views')
      .select('table_name')
      .in('table_name', ['current_stock_view', 'stock_by_location_view']);
    
    if (viewsError) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å VIEW:', viewsError);
    } else {
      const foundViews = viewsCheck.map(v => v.table_name);
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ VIEW:', foundViews);
      
      if (foundViews.includes('current_stock_view') && foundViews.includes('stock_by_location_view')) {
        console.log('üéâ –û–±–∞ VIEW —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
      } else {
        console.log('‚ö†Ô∏è –ù–µ –≤—Å–µ VIEW —Å–æ–∑–¥–∞–Ω—ã. –ù–∞–π–¥–µ–Ω—ã:', foundViews);
      }
    }
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ current_stock_view
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ current_stock_view...');
    
    const { data: testData, error: testError } = await supabaseAdmin
      .from('current_stock_view')
      .select('*')
      .limit(3);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ current_stock_view:', testError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ current_stock_view:');
      console.log(JSON.stringify(testData, null, 2));
    }
    
    console.log('üèÅ –ì–æ—Ç–æ–≤–æ! VIEW –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
applyFixedViews(); 