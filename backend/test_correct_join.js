require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function testCorrectJoin() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û JOIN –° VIEW');
    console.log('='.repeat(60));
    
    const organizationId = 1;
    
    console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JOIN —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è organization_id: ${organizationId}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JOIN –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('\n1Ô∏è‚É£ –ü–†–ê–í–ò–õ–¨–ù–´–ô JOIN: products —Å current_stock_view(*)');
    const { data: productsWithStock, error: joinError } = await supabaseAdmin
      .from('products')
      .select('*, current_stock_view(*)')
      .eq('organization_id', organizationId)
      .order('name')
      .limit(5);

    if (joinError) {
      console.error('‚ùå JOIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', joinError);
      console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
      console.log('1. –ù–µ—Ç foreign key —Å–≤—è–∑–∏ –º–µ–∂–¥—É products –∏ current_stock_view');
      console.log('2. VIEW current_stock_view –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è VIEW (–Ω—É–∂–Ω—ã —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ VIEW)');
      
      console.log('\n2Ô∏è‚É£ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–°: –±–µ–∑ (*) ');
      const { data: altData, error: altError } = await supabaseAdmin
        .from('products')
        .select('*, current_stock_view!inner(current_stock, stock_status)')
        .eq('organization_id', organizationId)
        .limit(3);
      
      if (altError) {
        console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', altError);
      } else {
        console.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(altData?.[0], null, 2));
      }
      
      return;
    }

    console.log(`‚úÖ JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${productsWithStock?.length || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    if (!productsWithStock || productsWithStock.length === 0) {
      console.log('‚ö†Ô∏è JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüì¶ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
    const firstProduct = productsWithStock[0];
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    console.log(JSON.stringify(firstProduct, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç current_stock_view –≤ –æ—Ç–≤–µ—Ç–µ
    console.log('\nüîç –ê–ù–ê–õ–ò–ó current_stock_view:');
    if (firstProduct.current_stock_view) {
      console.log('‚úÖ current_stock_view –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:', JSON.stringify(firstProduct.current_stock_view, null, 2));
    } else {
      console.log('‚ùå current_stock_view –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ null');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    console.log('\nüîß –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ö–ê–ö –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ï:');
    
    const transformedData = productsWithStock.map(item => {
      const stockView = item.current_stock_view;
      
      return {
        product_id: item.id,
        product_name: item.name,
        sku: item.sku,
        code: item.code,
        price: item.price,
        current_stock: Number(stockView?.current_stock) || 0,
        stock_status: stockView?.stock_status || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        locations_with_stock: Number(stockView?.locations_with_stock) || 0
      };
    });

    console.log('–ü–µ—Ä–≤—ã–µ 2 –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞:');
    transformedData.slice(0, 2).forEach((product, index) => {
      console.log(`\n${index + 1}. ${product.product_name}`);
      console.log(`   - –û—Å—Ç–∞—Ç–æ–∫: ${product.current_stock}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${product.stock_status}`);
      console.log(`   - –õ–æ–∫–∞—Ü–∏–π: ${product.locations_with_stock}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    const hasStockData = transformedData.some(p => p.current_stock > 0);
    const totalStock = transformedData.reduce((sum, p) => sum + p.current_stock, 0);
    
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log(`–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${totalStock}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0: ${transformedData.filter(p => p.current_stock > 0).length}`);

    if (hasStockData) {
      console.log('‚úÖ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô JOIN –†–ê–ë–û–¢–ê–ï–¢! –ï—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏.');
      console.log('‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –±–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏–π.');
    } else {
      console.log('‚ö†Ô∏è JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é.');
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ current_stock_view.');
    }

    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:');
    if (hasStockData) {
      console.log('üéâ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô SUPABASE JOIN –†–ï–®–ê–ï–¢ –ó–ê–î–ê–ß–£!');
      console.log('üéâ RPC —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ù–£–ñ–ù–ê - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π JOIN.');
    } else {
      console.log('‚ö†Ô∏è JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏, –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
    }
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ JOIN...');
testCorrectJoin(); 