require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function testFinalJoin() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û JOIN –°–ò–ù–¢–ê–ö–°–ò–°–ê');
    console.log('='.repeat(60));
    
    const organizationId = 1;
    
    console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JOIN –¥–ª—è organization_id: ${organizationId}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û —Ç–æ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô SUPABASE JOIN:');
    console.log('products.select("*, current_stock_view(current_stock, stock_status, locations_with_stock)")');
    
    const { data, error } = await supabaseAdmin
      .from('products')
      .select(`
        *,
        current_stock_view ( current_stock, stock_status, locations_with_stock )
      `)
      .eq('organization_id', organizationId)
      .order('name')
      .limit(5);

    if (error) {
      console.error('‚ùå JOIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error);
      console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
      console.log('1. VIEW current_stock_view –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('2. –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É products –∏ current_stock_view');
      console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    console.log(`‚úÖ JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    if (!data || data.length === 0) {
      console.log('‚ö†Ô∏è JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüì¶ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
    const firstProduct = data[0];
    console.log('–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    console.log(JSON.stringify(firstProduct, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ current_stock_view
    console.log('\nüîç –ê–ù–ê–õ–ò–ó current_stock_view:');
    if (firstProduct.current_stock_view) {
      console.log('‚úÖ current_stock_view –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JOIN!');
      console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ current_stock_view:');
      console.log(JSON.stringify(firstProduct.current_stock_view, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
      const stockView = firstProduct.current_stock_view;
      if (stockView.current_stock && stockView.current_stock > 0) {
        console.log(`‚úÖ –ï–°–¢–¨ –†–ï–ê–õ–¨–ù–´–ï –û–°–¢–ê–¢–ö–ò: ${stockView.current_stock}`);
      } else {
        console.log(`‚ö†Ô∏è –û—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–µ–Ω: ${stockView.current_stock}`);
      }
    } else {
      console.log('‚ùå current_stock_view –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ null');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    console.log('\nüîß –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ö–ê–ö –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ï:');
    
    const transformedData = data.map(item => {
      const stockView = item.current_stock_view;
      
      return {
        product_id: item.id,
        product_name: item.name,
        sku: item.sku,
        code: item.code,
        price: Number(item.price) || 0,
        current_stock: Number(stockView?.current_stock) || 0,
        stock_status: stockView?.stock_status || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        locations_with_stock: Number(stockView?.locations_with_stock) || 0
      };
    });

    console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    transformedData.forEach((product, index) => {
      console.log(`\n${index + 1}. ${product.product_name}`);
      console.log(`   - ID: ${product.product_id}`);
      console.log(`   - –û—Å—Ç–∞—Ç–æ–∫: ${product.current_stock}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${product.stock_status}`);
      console.log(`   - –õ–æ–∫–∞—Ü–∏–π: ${product.locations_with_stock}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    const hasStockData = transformedData.some(p => p.current_stock > 0);
    const totalStock = transformedData.reduce((sum, p) => sum + p.current_stock, 0);
    
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log(`–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º: ${totalStock}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0: ${transformedData.filter(p => p.current_stock > 0).length}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: ${transformedData.filter(p => p.current_stock === 0).length}`);

    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:');
    if (hasStockData) {
      console.log('üéâ –ü–†–ê–í–ò–õ–¨–ù–´–ô JOIN –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('üéâ –ï—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ JOIN —Å current_stock_view!');
      console.log('üéâ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º!');
    } else {
      console.log('‚ö†Ô∏è JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é');
      console.log('‚ö†Ô∏è –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ current_stock_view');
    }

    console.log('\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:');
    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å /api/inventory/products');
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ JOIN —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');
testFinalJoin(); 