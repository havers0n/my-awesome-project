const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL || 'https://iumfkjvlkqzfgacsckmy.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml1bWZranZsa3F6ZmdhY3Nja215Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDE3MDMxNCwiZXhwIjoyMDQ5NzQ2MzE0fQ.vZKlTuBqMj-Vx7X4dCO6E9GjvQ6sSEBsH7vwhpFU-_M';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkOperationsData() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ï OPERATIONS');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã operations
    console.log('\n1Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã operations:');
    const { data: operations, error: opsError } = await supabase
      .from('operations')
      .select('*')
      .limit(3);
    
    if (opsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ operations:', opsError);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations?.length || 0}`);
    if (operations && operations.length > 0) {
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:');
      console.log(Object.keys(operations[0]));
      console.log('üìã –ü–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:', operations[0]);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å JOIN –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
    console.log('\n2Ô∏è‚É£ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å JOIN –∫ locations –∏ suppliers:');
    const { data: operationsWithJoin, error: joinError } = await supabase
      .from('operations')
      .select(`
        id,
        operation_type,
        operation_date,
        quantity,
        total_amount,
        cost_price,
        product_id,
        location_id,
        supplier_id,
        locations(id, name),
        suppliers(id, name),
        products(id, name)
      `)
      .limit(5);
    
    if (joinError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ JOIN –∑–∞–ø—Ä–æ—Å–∞:', joinError);
    } else {
      console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å JOIN: ${operationsWithJoin?.length || 0}`);
      if (operationsWithJoin && operationsWithJoin.length > 0) {
        console.log('üìã –ü–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å JOIN:', operationsWithJoin[0]);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, product_id = 64)
    console.log('\n3Ô∏è‚É£ –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID 64:');
    const { data: productOps, error: prodOpsError } = await supabase
      .from('operations')
      .select(`
        id,
        operation_type,
        operation_date,
        quantity,
        total_amount,
        cost_price,
        locations(id, name),
        suppliers(id, name)
      `)
      .eq('product_id', 64)
      .order('operation_date', { ascending: false })
      .limit(10);
    
    if (prodOpsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞:', prodOpsError);
    } else {
      console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ 64: ${productOps?.length || 0}`);
      if (productOps && productOps.length > 0) {
        console.log('üìã –û–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ 64:');
        productOps.forEach((op, index) => {
          console.log(`  ${index + 1}. ${op.operation_type} - ${op.quantity} —à—Ç. (${op.operation_date})`);
          if (op.locations) console.log(`     –õ–æ–∫–∞—Ü–∏—è: ${op.locations.name}`);
          if (op.suppliers) console.log(`     –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${op.suppliers.name}`);
        });
      }
    }
    
    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:');
    const { count: totalOps } = await supabase
      .from('operations')
      .select('*', { count: 'exact', head: true });
    
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalOps || 0}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
    const { data: typeStats, error: typeError } = await supabase
      .from('operations')
      .select('operation_type')
      .order('operation_type');
    
    if (!typeError && typeStats) {
      const typeCounts = typeStats.reduce((acc, op) => {
        acc[op.operation_type] = (acc[op.operation_type] || 0) + 1;
        return acc;
      }, {});
      
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:');
      Object.entries(typeCounts).forEach(([type, count]) => {
        console.log(`  ${type}: ${count}`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∏ —Å products, locations, suppliers
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:');
    
    const { data: productsCheck } = await supabase
      .from('products')
      .select('id, name')
      .limit(3);
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${productsCheck?.length || 0}`);
    
    const { data: locationsCheck } = await supabase
      .from('locations')
      .select('id, name')
      .limit(3);
    console.log(`üìç –õ–æ–∫–∞—Ü–∏–π –≤ –±–∞–∑–µ: ${locationsCheck?.length || 0}`);
    
    const { data: suppliersCheck } = await supabase
      .from('suppliers')
      .select('id, name')
      .limit(3);
    console.log(`üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑–µ: ${suppliersCheck?.length || 0}`);
    
  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkOperationsData().catch(console.error); 