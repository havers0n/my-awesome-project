require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function testLocationMapping() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–ü–ü–ò–ù–ì–ê –ü–û –õ–û–ö–ê–¶–ò–Ø–ú');
    console.log('='.repeat(50));
    
    const organizationId = 1;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
    console.log('\n1Ô∏è‚É£ –î–ê–ù–ù–´–ï –ò–ó stock_by_location_view:');
    const { data: locationData, error: locationError } = await supabaseAdmin
      .from('stock_by_location_view')
      .select('*')
      .eq('organization_id', organizationId)
      .limit(10);

    if (locationError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', locationError);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${locationData?.length || 0} –∑–∞–ø–∏—Å–µ–π –ø–æ –ª–æ–∫–∞—Ü–∏—è–º`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    const productIds = [...new Set(locationData?.map(loc => loc.product_id) || [])];
    console.log(`üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏—è—Ö: ${productIds.length}`);
    console.log(`üì¶ ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${productIds.slice(0, 5).join(', ')}${productIds.length > 5 ? '...' : ''}`);

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if (productIds.length > 0) {
      const testProductId = productIds[0];
      console.log(`\n2Ô∏è‚É£ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–†–û–î–£–ö–¢–ê ID = ${testProductId}:`);
      
      const productLocations = locationData?.filter(loc => loc.product_id === testProductId) || [];
      console.log(`üìç –õ–æ–∫–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productLocations.length}`);
      
      productLocations.forEach(loc => {
        console.log(`  - ${loc.location_name} (ID: ${loc.location_id}): ${loc.stock}`);
      });

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
      console.log('\n3Ô∏è‚É£ –ú–ê–ü–ü–ò–ù–ì –ö–ê–ö –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ï:');
      const stockByLocation = productLocations.map((loc) => ({
        location_id: loc.location_id,
        location_name: loc.location_name,
        stock: Number(loc.stock) || 0
      }));

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø–∏–Ω–≥–∞:');
      console.log(JSON.stringify(stockByLocation, null, 2));

      // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
      console.log('\n4Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–†–û–î–£–ö–¢–ê:');
      const { data: productData, error: productError } = await supabaseAdmin
        .from('products')
        .select('*')
        .eq('id', testProductId)
        .single();

      if (productError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:', productError);
      } else {
        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç: ${productData.name}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ current_stock_view
        const { data: stockViewData, error: stockViewError } = await supabaseAdmin
          .from('current_stock_view')
          .select('*')
          .eq('product_id', testProductId)
          .single();

        if (stockViewError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ current_stock_view:', stockViewError);
        } else {
          console.log(`‚úÖ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${stockViewData.current_stock}`);

          // –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
          console.log('\n5Ô∏è‚É£ –ü–û–õ–ù–´–ô –û–ë–™–ï–ö–¢ –î–õ–Ø FRONTEND:');
          const fullProduct = {
            product_id: productData.id,
            product_name: productData.name,
            sku: productData.sku,
            code: productData.code,
            price: Number(productData.price) || 0,
            stock_by_location: stockByLocation,
            created_at: productData.created_at,
            updated_at: productData.updated_at,
            current_stock: Number(stockViewData.current_stock) || 0,
            stock_status: stockViewData.stock_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            locations_with_stock: stockByLocation.length
          };

          console.log(JSON.stringify(fullProduct, null, 2));

          console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê:');
          if (fullProduct.current_stock > 0) {
            console.log('‚úÖ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ > 0');
          } else {
            console.log('‚ùå –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ = 0');
          }

          if (fullProduct.stock_by_location.length > 0) {
            console.log('‚úÖ –ï—Å—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º');
          } else {
            console.log('‚ùå –ù–ï–¢ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º');
          }
        }
      }
    }

    console.log('\n7Ô∏è‚É£ –ü–†–û–ë–õ–ï–ú–ê –í –¢–ï–°–¢–ï:');
    console.log('–í –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–µ—Å—Ç–µ –º—ã –±—Ä–∞–ª–∏ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É,');
    console.log('–Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º –µ—Å—Ç—å –Ω–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
    console.log('–ù—É–∂–Ω–æ –ª–∏–±–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ª–∏–±–æ –±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã');
    console.log('–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ stock_by_location_view.');
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–π...');
testLocationMapping(); 