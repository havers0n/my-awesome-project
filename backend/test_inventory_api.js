require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function testInventoryAPI() {
  try {
    console.log('üß™ –ê–£–î–ò–¢ API /inventory/products');
    console.log('='.repeat(50));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º direct SQL –∑–∞–ø—Ä–æ—Å—ã –∫ VIEW
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê VIEW current_stock_view:');
    const { data: viewData, error: viewError } = await supabaseAdmin
      .from('current_stock_view')
      .select('*')
      .limit(3);
    
    if (viewError) {
      console.error('‚ùå VIEW current_stock_view –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', viewError);
    } else {
      console.log('‚úÖ VIEW current_stock_view —Ä–∞–±–æ—Ç–∞–µ—Ç:');
      console.log(JSON.stringify(viewData, null, 2));
    }
    
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê VIEW stock_by_location_view:');
    const { data: locationData, error: locationError } = await supabaseAdmin
      .from('stock_by_location_view')
      .select('*')
      .limit(5);
    
    if (locationError) {
      console.error('‚ùå VIEW stock_by_location_view –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', locationError);
    } else {
      console.log('‚úÖ VIEW stock_by_location_view —Ä–∞–±–æ—Ç–∞–µ—Ç:');
      console.log(JSON.stringify(locationData, null, 2));
    }
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ getProducts
    console.log('\n3Ô∏è‚É£ –ò–ú–ò–¢–ê–¶–ò–Ø –õ–û–ì–ò–ö–ò getProducts:');
    
    const organizationId = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ó–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    const { data: stockData, error: stockError } = await supabaseAdmin
      .from('current_stock_view')
      .select('*')
      .eq('organization_id', organizationId)
      .order('product_name');
    
    if (stockError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', stockError);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${stockData?.length || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è organization_id = ${organizationId}`);
    
    if (!stockData || stockData.length === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–•! –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è organization_id = 1');
      console.log('   - VIEW —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('   - –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ operations');
      return;
    }
    
    // –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
    const { data: locationStockData, error: locationStockError } = await supabaseAdmin
      .from('stock_by_location_view')
      .select('*')
      .eq('organization_id', organizationId);
    
    console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${locationStockData?.length || 0} –∑–∞–ø–∏—Å–µ–π –ø–æ –ª–æ–∫–∞—Ü–∏—è–º`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    const formattedProducts = stockData.map((item) => {
      const stockByLocation = (locationStockData || [])
        .filter((loc) => loc.product_id === item.product_id)
        .map((loc) => ({
          location_id: loc.location_id,
          location_name: loc.location_name,
          stock: Number(loc.stock) || 0
        }));

      return {
        product_id: item.product_id,
        product_name: item.product_name,
        sku: item.sku,
        code: item.code,
        price: Number(item.price) || 0,
        stock_by_location: stockByLocation,
        created_at: item.created_at,
        updated_at: item.updated_at,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        current_stock: Number(item.current_stock) || 0,
        stock_status: item.stock_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        locations_with_stock: Number(item.locations_with_stock) || 0
      };
    });
    
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ API (–∫–∞–∫ –µ–≥–æ –≤–∏–¥–∏—Ç frontend):');
    const apiResponse = {
      data: formattedProducts,
      pagination: {
        page: 1,
        limit: 100,
        total: formattedProducts.length
      }
    };
    
    console.log('–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:');
    console.log(JSON.stringify(apiResponse, null, 2));
    
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:');
    formattedProducts.forEach((product, index) => {
      console.log(`\nüì¶ –ü—Ä–æ–¥—É–∫—Ç ${index + 1}: ${product.product_name}`);
      console.log(`   - SKU: ${product.sku}`);
      console.log(`   - –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${product.current_stock}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${product.stock_status}`);
      console.log(`   - –õ–æ–∫–∞—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: ${product.locations_with_stock}`);
      console.log(`   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º: ${product.stock_by_location.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (product.stock_by_location.length > 0) {
        product.stock_by_location.forEach(loc => {
          console.log(`     ‚Ä¢ ${loc.location_name}: ${loc.stock}`);
        });
      } else {
        console.log(`     ‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–• –ü–û –õ–û–ö–ê–¶–ò–Ø–ú!`);
      }
    });
    
    console.log('\n6Ô∏è‚É£ –í–´–í–û–î–´:');
    if (formattedProducts.length === 0) {
      console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - frontend –ø–æ–ª—É—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } else {
      const hasStockData = formattedProducts.some(p => p.current_stock > 0 || p.stock_by_location.length > 0);
      if (hasStockData) {
        console.log('‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ frontend');
      } else {
        console.log('‚ö†Ô∏è API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–æ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ VIEW –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    }
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ API...');
testInventoryAPI(); 