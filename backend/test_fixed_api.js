require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function testFixedAPI() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API');
    console.log('='.repeat(50));
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ getProducts –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    const organizationId = 1;
    
    console.log(`üìä Testing JOIN approach for organization_id: ${organizationId}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º JOIN –ø–æ–¥—Ö–æ–¥ –∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    console.log('\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï JOIN products —Å current_stock_view:');
    
    const { data: productsWithStock, error: productsError } = await supabaseAdmin
      .from('products')
      .select(`
          id,
          name,
          sku,
          code,
          price,
          organization_id,
          created_at,
          updated_at,
          current_stock_view!inner(current_stock)
      `)
      .eq('organization_id', organizationId)
      .order('name');

    if (productsError) {
      console.error('‚ùå JOIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', productsError);
      console.log('\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FALLBACK –ø–æ–¥—Ö–æ–¥–∞:');
      
      // Fallback –ø–æ–¥—Ö–æ–¥ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
      const { data: allProducts, error: allProductsError } = await supabaseAdmin
        .from('products')
        .select('*')
        .eq('organization_id', organizationId)
        .order('name');

      if (allProductsError) {
        console.error('‚ùå Products fallback error:', allProductsError);
        return;
      }

      const { data: stockView, error: stockViewError } = await supabaseAdmin
        .from('current_stock_view')
        .select('*')
        .eq('organization_id', organizationId);

      if (stockViewError) {
        console.error('‚ùå Stock view error:', stockViewError);
        return;
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
      const stockData = (allProducts || []).map(product => {
        const stockInfo = (stockView || []).find(s => s.product_id === product.id);
        return {
          product_id: product.id,
          product_name: product.name,
          sku: product.sku,
          code: product.code,
          price: product.price,
          organization_id: product.organization_id,
          created_at: product.created_at,
          updated_at: product.updated_at,
          current_stock: stockInfo?.current_stock || 0,
          stock_status: stockInfo?.stock_status || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          locations_with_stock: stockInfo?.locations_with_stock || 0
        };
      });

      console.log(`‚úÖ Fallback successful: ${stockData.length} products`);
      console.log('–ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏:');
      stockData.slice(0, 3).forEach(product => {
        console.log(`  - ${product.product_name}: ${product.current_stock} (${product.stock_status})`);
      });

      var finalStockData = stockData;
    } else {
      console.log(`‚úÖ JOIN successful: ${productsWithStock?.length || 0} products`);
      
      const joinStockData = (productsWithStock || []).map(item => ({
        product_id: item.id,
        product_name: item.name,
        sku: item.sku,
        code: item.code,
        price: item.price,
        organization_id: item.organization_id,
        created_at: item.created_at,
        updated_at: item.updated_at,
        current_stock: item.current_stock_view?.current_stock || 0,
        stock_status: 'JOIN –¥–∞–Ω–Ω—ã–µ',
        locations_with_stock: 1
      }));

      console.log('–ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ JOIN:');
      joinStockData.slice(0, 3).forEach(product => {
        console.log(`  - ${product.product_name}: ${product.current_stock}`);
      });

      var finalStockData = joinStockData;
    }

    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï stock_by_location_view:');
    
    const { data: locationStockData, error: locationError } = await supabaseAdmin
      .from('stock_by_location_view')
      .select('*')
      .eq('organization_id', organizationId)
      .limit(5);

    if (locationError) {
      console.error('‚ùå Location stock error:', locationError);
    } else {
      console.log(`‚úÖ Location data: ${locationStockData?.length || 0} records`);
      if (locationStockData && locationStockData.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:');
        locationStockData.slice(0, 3).forEach(loc => {
          console.log(`  - ${loc.product_name} –≤ ${loc.location_name}: ${loc.stock}`);
        });
      }
    }

    console.log('\n4Ô∏è‚É£ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ö –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ï:');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    const formattedProducts = finalStockData.slice(0, 3).map((item) => {
      const stockByLocation = (locationStockData || [])
        .filter((loc) => loc.product_id === item.product_id)
        .map((loc) => ({
          location_id: loc.location_id,
          location_name: loc.location_name,
          stock: Number(loc.stock) || 0
        }));

      return {
        product_id: item.product_id,
        product_name: item.product_name,
        sku: item.sku,
        code: item.code,
        price: Number(item.price) || 0,
        stock_by_location: stockByLocation,
        created_at: item.created_at,
        updated_at: item.updated_at,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        current_stock: Number(item.current_stock) || 0,
        stock_status: item.stock_status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        locations_with_stock: Number(item.locations_with_stock) || 0
      };
    });

    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç frontend):');
    const apiResponse = {
      data: formattedProducts,
      pagination: {
        page: 1,
        limit: 100,
        total: finalStockData.length
      }
    };

    console.log(JSON.stringify(apiResponse, null, 2));

    console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–°–¢–ê–¢–ö–û–í:');
    const hasStockData = formattedProducts.some(p => p.current_stock > 0);
    const hasLocationData = formattedProducts.some(p => p.stock_by_location.length > 0);
    
    if (hasStockData) {
      console.log('‚úÖ –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—â–∏–º –æ—Å—Ç–∞—Ç–∫–∞–º');
    } else {
      console.log('‚ùå –ù–ï–¢ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—â–∏–º –æ—Å—Ç–∞—Ç–∫–∞–º');
    }
    
    if (hasLocationData) {
      console.log('‚úÖ –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º');
    } else {
      console.log('‚ùå –ù–ï–¢ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–æ–∫–∞—Ü–∏—è–º');
    }

    console.log('\nüéØ –í–´–í–û–î:');
    if (hasStockData && hasLocationData) {
      console.log('‚úÖ API –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! Frontend –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.');
    } else if (hasStockData) {
      console.log('‚ö†Ô∏è –û–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º.');
    } else {
      console.log('‚ùå –û—Å—Ç–∞—Ç–∫–æ–≤ –≤—Å—ë –µ—â—ë –Ω–µ—Ç - –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.');
    }
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API...');
testFixedAPI(); 