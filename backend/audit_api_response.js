require('dotenv').config();
const axios = require('axios');

async function auditAPIResponse() {
  try {
    console.log('üîç –ê–£–î–ò–¢ API RESPONSE: /api/inventory/products');
    console.log('='.repeat(60));
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000
    const apiUrl = 'http://localhost:3000/api/inventory/products';
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –∫: ${apiUrl}`);
    console.log('‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    
    const response = await axios.get(apiUrl, {
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        'organization-id': '1'
      }
    });

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(response.data).length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    const data = response.data;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    console.log('\nüìã –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:');
    console.log('- –ï—Å—Ç—å –ø–æ–ª–µ data:', !!data.data);
    console.log('- –ï—Å—Ç—å –ø–æ–ª–µ pagination:', !!data.pagination);
    
    if (data.data && Array.isArray(data.data)) {
      console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${data.data.length}`);
      
      if (data.data.length > 0) {
        console.log('\nüì¶ –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ì–û –ü–†–û–î–£–ö–¢–ê:');
        const firstProduct = data.data[0];
        
        console.log('–ü–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:');
        Object.keys(firstProduct).forEach(key => {
          console.log(`  - ${key}: ${typeof firstProduct[key]} = ${firstProduct[key]}`);
        });
        
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–¢–ö–û–í:');
        console.log(`current_stock: ${firstProduct.current_stock} (—Ç–∏–ø: ${typeof firstProduct.current_stock})`);
        console.log(`stock_status: ${firstProduct.stock_status}`);
        console.log(`locations_with_stock: ${firstProduct.locations_with_stock}`);
        
        if (firstProduct.stock_by_location && Array.isArray(firstProduct.stock_by_location)) {
          console.log(`stock_by_location: ${firstProduct.stock_by_location.length} –ª–æ–∫–∞—Ü–∏–π`);
          if (firstProduct.stock_by_location.length > 0) {
            console.log('–ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è:', JSON.stringify(firstProduct.stock_by_location[0], null, 2));
          }
        } else {
          console.log('stock_by_location: –ù–ï –ú–ê–°–°–ò–í –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        console.log('\nüìã –ü–û–õ–ù–´–ô JSON –ü–ï–†–í–û–ì–û –ü–†–û–î–£–ö–¢–ê:');
        console.log(JSON.stringify(firstProduct, null, 2));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏
      console.log('\nüìä –ê–ù–ê–õ–ò–ó –û–°–¢–ê–¢–ö–û–í –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í:');
      
      const productsWithStock = data.data.filter(p => p.current_stock && p.current_stock > 0);
      const productsWithZeroStock = data.data.filter(p => !p.current_stock || p.current_stock === 0);
      
      console.log(`–ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0: ${productsWithStock.length}`);
      console.log(`–ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: ${productsWithZeroStock.length}`);
      
      if (productsWithStock.length > 0) {
        console.log('\n‚úÖ –ü–†–û–î–£–ö–¢–´ –° –û–°–¢–ê–¢–ö–ê–ú–ò:');
        productsWithStock.slice(0, 5).forEach((product, index) => {
          console.log(`${index + 1}. ${product.product_name}: ${product.current_stock}`);
        });
      }
      
      if (productsWithZeroStock.length > 0) {
        console.log('\n‚ùå –ü–†–û–î–£–ö–¢–´ –ë–ï–ó –û–°–¢–ê–¢–ö–û–í:');
        productsWithZeroStock.slice(0, 5).forEach((product, index) => {
          console.log(`${index + 1}. ${product.product_name}: ${product.current_stock}`);
        });
      }
      
    } else {
      console.log('‚ùå data.data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
    console.log('\nüéØ –í–´–í–û–î–´:');
    if (data.data && data.data.length > 0) {
      const hasAnyStock = data.data.some(p => p.current_stock && p.current_stock > 0);
      if (hasAnyStock) {
        console.log('‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏');
        console.log('‚û°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ backend API');
        console.log('‚û°Ô∏è –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ VIEW');
      } else {
        console.log('‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–ª–µ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏');
        console.log('‚û°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤ backend –ª–æ–≥–∏–∫–µ –∏–ª–∏ VIEW –¥–∞–Ω–Ω—ã—Ö');
        console.log('‚û°Ô∏è –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å current_stock_view –≤ –±–∞–∑–µ');
      }
    } else {
      console.log('‚ùå API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã');
      console.log('‚û°Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ backend');
    }
    
  } catch (error) {
    console.error('\nüí• –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–†–û–°–ï –ö API:');
    
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
      console.log('\nüîß –î–õ–Ø –ó–ê–ü–£–°–ö–ê BACKEND:');
      console.log('cd backend');
      console.log('npm start');
    } else if (error.response) {
      console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${error.response.status}`);
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response.data}`);
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
    
    console.log('\n‚û°Ô∏è –°–ù–ê–ß–ê–õ–ê –ó–ê–ü–£–°–¢–ò–¢–ï BACKEND, –ó–ê–¢–ï–ú –ü–û–í–¢–û–†–ò–¢–ï –ê–£–î–ò–¢');
  }
}

console.log('–ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ API response...');
auditAPIResponse(); 