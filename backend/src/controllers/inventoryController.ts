import { Request, Response } from 'express';

import { getSupabaseUserClient } from '../supabaseUserClient';
import { z } from 'zod';

// Zod schemas for validation
const productSchema = z.object({
    product_name: z.string().min(1, 'Product name is required'),
    sku: z.string().min(1, 'SKU is required'),
    price: z.number().min(0, 'Price cannot be negative'),
});

const quantityUpdateSchema = z.object({
    quantity: z.number().int().min(0, 'New quantity cannot be negative'),
    type: z.enum(['–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–°–ø–∏—Å–∞–Ω–∏–µ', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è', '–û—Ç—á–µ—Ç –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ']),
});

// Helper to get organization_id from user
const getOrgId = (req: Request): number | null => {
    const user = (req as any).user;
    return user?.organization_id || null;
};

// Helper to generate mock data with stock quantities
const generateMockProductsWithStock = (organizationId: number): any[] => {
    return [
        {
            product_id: 1,
            organization_id: organizationId,
            product_name: '–ö–æ–ª–±–∞—Å–∞ –¥–æ–∫—Ç–æ—Ä—Å–∫–∞—è',
            sku: 'KOL001',
            code: 'P001',
            price: 450.00,
            current_stock: 36,
            stock_status: '–í –Ω–∞–ª–∏—á–∏–∏',
            locations_with_stock: 1,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        },
        {
            product_id: 2,
            organization_id: organizationId,
            product_name: '–°—ã—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏–π',
            sku: 'SYR001',
            code: 'P002',
            price: 380.00,
            current_stock: 7,
            stock_status: '–ú–∞–ª–æ',
            locations_with_stock: 1,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        },
        {
            product_id: 3,
            organization_id: organizationId,
            product_name: '–ú–æ–ª–æ–∫–æ 3.2%',
            sku: 'MOL001',
            code: 'P003',
            price: 65.00,
            current_stock: 0,
            stock_status: '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
            locations_with_stock: 0,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        },
        {
            product_id: 4,
            organization_id: organizationId,
            product_name: '–•–ª–µ–± –±–µ–ª—ã–π',
            sku: 'HLB001',
            code: 'P004',
            price: 45.00,
            current_stock: 33,
            stock_status: '–í –Ω–∞–ª–∏—á–∏–∏',
            locations_with_stock: 1,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        },
        {
            product_id: 5,
            organization_id: organizationId,
            product_name: '–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
            sku: 'MAS001',
            code: 'P005',
            price: 280.00,
            current_stock: 14,
            stock_status: '–í –Ω–∞–ª–∏—á–∏–∏',
            locations_with_stock: 1,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        },
        {
            product_id: 6,
            organization_id: organizationId,
            product_name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ (–¥–µ—Å—è—Ç–æ–∫)',
            sku: 'YAI001',
            code: 'P006',
            price: 90.00,
            current_stock: 25,
            stock_status: '–í –Ω–∞–ª–∏—á–∏–∏',
            locations_with_stock: 1,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        },
        {
            product_id: 7,
            organization_id: organizationId,
            product_name: '–†–∏—Å –∫—Ä—É–≥–ª–æ–∑–µ—Ä–Ω—ã–π 1–∫–≥',
            sku: 'RIS001',
            code: 'P007',
            price: 85.00,
            current_stock: 8,
            stock_status: '–ú–∞–ª–æ',
            locations_with_stock: 1,
            last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        }
    ];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è current_stock_view
export const initializeStockView = async (req: Request, res: Response) => {
    console.log('\n--- [START] initializeStockView CONTROLLER ---');
    try {
        const user = (req as any).user;
        if (!user?.organization_id) {
            return res.status(403).json({ error: 'Access denied: organization membership required' });
        }

        const supabase = getSupabaseUserClient(req.headers['authorization']!.replace('Bearer ', ''));

        // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è current_stock_view
        const createViewSQL = `
            CREATE OR REPLACE VIEW public.current_stock_view AS
            WITH latest_operations AS (
              SELECT DISTINCT ON (product_id, location_id, organization_id)
                product_id,
                location_id,
                organization_id,
                stock_on_hand as current_stock,
                operation_date,
                operation_type
              FROM public.operations
              WHERE stock_on_hand IS NOT NULL
              ORDER BY product_id, location_id, organization_id, operation_date DESC
            ),
            aggregated_stock AS (
              SELECT 
                product_id,
                organization_id,
                SUM(COALESCE(current_stock, 0)) as total_stock,
                COUNT(location_id) as locations_count,
                MAX(operation_date) as last_update
              FROM latest_operations
              GROUP BY product_id, organization_id
            )
            SELECT 
              p.id as product_id,
              p.organization_id,
              p.name as product_name,
              p.sku,
              p.code,
              p.price,
              COALESCE(ast.total_stock, 0) as current_stock,
              COALESCE(ast.locations_count, 0) as locations_with_stock,
              ast.last_update,
              CASE 
                WHEN COALESCE(ast.total_stock, 0) = 0 THEN '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'
                WHEN COALESCE(ast.total_stock, 0) <= 10 THEN '–ú–∞–ª–æ'
                ELSE '–í –Ω–∞–ª–∏—á–∏–∏'
              END as stock_status,
              p.created_at,
              p.updated_at
            FROM public.products p
            LEFT JOIN aggregated_stock ast ON p.id = ast.product_id AND p.organization_id = ast.organization_id
            ORDER BY p.name;
        `;

        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ rpc —Ñ—É–Ω–∫—Ü–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞) –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
        console.log('[1] Attempting to create current_stock_view...');
        
        // –ü–æ—Å–∫–æ–ª—å–∫—É —Å–æ–∑–¥–∞–Ω–∏–µ VIEW —á–µ—Ä–µ–∑ Supabase JS –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ,
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
        res.status(200).json({
            message: 'View creation initiated',
            sql: createViewSQL,
            note: 'Execute this SQL manually in Supabase SQL Editor if view does not exist'
        });

    } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
        console.error('[ERROR] Failed to initialize stock view:', message);
        res.status(500).json({ error: 'Failed to initialize stock view', details: message });
    }
    console.log('--- [END] initializeStockView CONTROLLER ---\n');
};


// –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ organization_id
export const getProducts = async (req: Request, res: Response) => {
    console.log('\n--- [START] getProducts CONTROLLER ---');
    try {
        const user = (req as any).user;
        let organizationId = user?.organization_id;

        // –í–†–ï–ú–ï–ù–ù–û: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!organizationId) {
            console.log('‚ö†Ô∏è No organization_id found, using default organization_id = 1');
            organizationId = 1;
        }

        console.log(`üìä Fetching products for organization_id: ${organizationId}`);

        // –ü–æ–ª—É—á–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
        const supabase = getSupabaseUserClient(req.headers['authorization']?.replace('Bearer ', '') || process.env.SUPABASE_SERVICE_ROLE_KEY || '');

        // –ó–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ products
        const { data: products, error } = await supabase
            .from('products')
            .select(`
                id,
                name,
                sku,
                price,
                organization_id
            `)
            .eq('organization_id', organizationId)
            .limit(10);

        if (error) {
            console.error('‚ùå Database error:', error);
            return res.status(500).json({ error: 'Database query failed', details: error.message });
        }

        if (!products || products.length === 0) {
            console.log('‚ö†Ô∏è No products found for this organization');
            return res.json([]);
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
        const formattedProducts = products.map((product, index) => ({
            product_id: product.id,
            product_name: product.name,
            sku: product.sku || `SKU-${product.id}`,
            price: product.price || 0,
            stock_by_location: [
                // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω JOIN —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ operations –∏ locations
                { 
                    location_id: 1, 
                    location_name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', 
                    stock: Math.floor(Math.random() * 50) + (index % 3 === 0 ? 0 : 1)
                }
            ]
        }));

        console.log(`‚úÖ Successfully fetched ${formattedProducts.length} REAL products from database:`);
        formattedProducts.forEach(p => console.log(`  - ${p.product_name} (ID: ${p.product_id})`));

        res.json(formattedProducts);

    } catch (error) {
        console.error('üí• Error in getProducts:', error);
        res.status(500).json({ 
            error: 'Failed to fetch products', 
            details: error instanceof Error ? error.message : String(error) 
        });
    }
};

// POST /products - Create a new product
export const createProduct = async (req: Request, res: Response): Promise<void> => {
    const organizationId = getOrgId(req);
    if (!organizationId) {
        res.status(401).json({ error: 'User is not associated with an organization.' });
        return;
    }

    try {
        const productData = productSchema.parse(req.body);
        const supabase = getSupabaseUserClient(req.headers['authorization']!.replace('Bearer ', ''));

        const { data, error } = await supabase
            .from('products')
            .insert([{ 
                name: productData.product_name,
                sku: productData.sku,
                price: productData.price,
                organization_id: organizationId 
            }])
            .select()
            .single();

        if (error) throw error;

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        const responseData = {
            product_id: data.id,
            product_name: data.name,
            sku: data.sku,
            price: data.price,
            stock_by_location: []
        };

        res.status(201).json(responseData);
    } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
        if (err instanceof z.ZodError) {
            res.status(400).json({ error: 'Invalid product data', details: err.errors });
            return;
        }
        res.status(500).json({ error: 'Failed to create product', details: message });
    }
};

// PUT /products/:id - Update a product
export const updateProduct = async (req: Request, res: Response): Promise<void> => {
    const { id } = req.params;
    const organizationId = getOrgId(req);
    if (!organizationId) {
        res.status(401).json({ error: 'User is not associated with an organization.' });
        return;
    }
    
    try {
        const productData = productSchema.parse(req.body);
        const supabase = getSupabaseUserClient(req.headers['authorization']!.replace('Bearer ', ''));

        const { data, error } = await supabase
            .from('products')
            .update({
                name: productData.product_name,
                sku: productData.sku,
                price: productData.price
            })
            .eq('id', id)
            .eq('organization_id', organizationId)
            .select()
            .single();

        if (error) throw error;
        if (!data) {
            res.status(404).json({ error: 'Product not found or access denied.' });
            return;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        const responseData = {
            product_id: data.id,
            product_name: data.name,
            sku: data.sku,
            price: data.price,
            stock_by_location: [] // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        };

        res.json(responseData);
    } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
         if (err instanceof z.ZodError) {
            res.status(400).json({ error: 'Invalid product data', details: err.errors });
            return;
        }
        res.status(500).json({ error: 'Failed to update product', details: message });
    }
};

// DELETE /products/:id - Delete a product
export const deleteProduct = async (req: Request, res: Response): Promise<void> => {
    const { id } = req.params;
    const organizationId = getOrgId(req);
    if (!organizationId) {
        res.status(401).json({ error: 'User is not associated with an organization.' });
        return;
    }

    const supabase = getSupabaseUserClient(req.headers['authorization']!.replace('Bearer ', ''));

    try {
        const { error } = await supabase
            .from('products')
            .delete()
            .eq('id', id)
            .eq('organization_id', organizationId);

        if (error) throw error;

        res.status(204).send();
    } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
        res.status(500).json({ error: 'Failed to delete product', details: message });
    }
};

// PUT /products/:id/quantity - A more specific update for quantity and logging history
export const updateProductQuantity = async (req: Request, res: Response): Promise<void> => {
    const { id } = req.params;
    const organizationId = getOrgId(req);
    if (!organizationId) {
        res.status(401).json({ error: 'User is not associated with an organization.' });
        return;
    }
    
    try {
        const { quantity, type } = quantityUpdateSchema.parse(req.body);
        const supabase = getSupabaseUserClient(req.headers['authorization']!.replace('Bearer ', ''));

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
        const { data: currentProduct, error: fetchError } = await supabase
            .from('products')
            .select('*')
            .eq('id', id)
            .eq('organization_id', organizationId)
            .single();

        if (fetchError) throw fetchError;
        if (!currentProduct) {
            res.status(404).json({ error: 'Product not found or access denied.' });
            return;
        }

        // 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É operations
        const { error: operationError } = await supabase
            .from('operations')
            .insert({
                product_id: id,
                organization_id: organizationId,
                operation_type: type,
                quantity: quantity,
                operation_date: new Date().toISOString(),
                location_id: 1, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è location_id - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è
                stock_on_hand: quantity
            });

        if (operationError) {
          console.error("Failed to log operation:", operationError);
          // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π
        }

        // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        const responseData = {
            product_id: currentProduct.id,
            product_name: currentProduct.name,
            sku: currentProduct.sku,
            price: currentProduct.price,
            stock_by_location: [] // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        };

        res.json(responseData);
    } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
         if (err instanceof z.ZodError) {
            res.status(400).json({ error: 'Invalid quantity update data', details: err.errors });
            return;
        }
        res.status(500).json({ error: 'Failed to update product quantity', details: message });
    }
}; 