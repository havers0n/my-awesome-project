

import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { supabaseAdmin } from './supabaseClient';

const isProduction = process.env.NODE_ENV === 'production';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS
const allowedOrigins = (process.env.CORS_ALLOWED_ORIGINS || 'http://localhost:5174,http://localhost:5173').split(',');

const corsOptions: cors.CorsOptions = {
  origin: (origin: string | undefined, callback: (err: Error | null, allow?: boolean) => void) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ curl
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'x-supabase-auth'],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  preflightContinue: false,
  optionsSuccessStatus: 204,
  exposedHeaders: ['Content-Length', 'Authorization'],
};

const app = express();

// Apply CORS middleware
app.use(cors(corsOptions));

// Helmet –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet());

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—Ä—É—Ç—Ñ–æ—Ä—Å-–∞—Ç–∞–∫
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ IP –¥–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç',
});
app.use(limiter);


app.use(express.json());

// Enhanced request logger for debugging API endpoints
if (!isProduction) {
  app.use((req, res, next) => {
    const requestId = Date.now().toString(36) + Math.random().toString(36).substring(2);
    console.log(`[${requestId}] === REQUEST === ${req.method} ${req.path}`);
    console.log(`[${requestId}] Headers: ${JSON.stringify(req.headers)}`);

    // Only log body for non-GET requests and if it exists
    if (req.method !== 'GET' && req.body && Object.keys(req.body).length > 0) {
      console.log(`[${requestId}] Body: ${JSON.stringify(req.body)}`);
    }

    // Log query parameters if they exist
    if (Object.keys(req.query).length > 0) {
      console.log(`[${requestId}] Query params: ${JSON.stringify(req.query)}`);
    }

    // Add response logging
    const originalSend = res.send;
    res.send = function(body) {
      console.log(`[${requestId}] === RESPONSE === Status: ${res.statusCode}`);
      // Don't log large response bodies to avoid console clutter
      if (body && typeof body === 'string' && body.length < 1000) {
        try {
          const parsedBody = JSON.parse(body);
          console.log(`[${requestId}] Response body: ${JSON.stringify(parsedBody, null, 2)}`);
        } catch (e) {
          // If not JSON, don't log the body
          console.log(`[${requestId}] Response sent (non-JSON or too large to display)`);
        }
      } else {
        console.log(`[${requestId}] Response sent (too large to display)`);
      }
      return originalSend.call(this, body);
    };

    next();
  });
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// PRODUCTS ENDPOINT: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
app.get('/api/inventory/products', async (req, res) => {
  console.log('üì¶ Fetching REAL data from database...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 50; // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const offset = (page - 1) * limit;
    
    console.log(`üìÑ Pagination: page=${page}, limit=${limit}, offset=${offset}`);
    
    // –ó–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ products —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const { data: products, error, count } = await supabaseAdmin
      .from('products')
      .select(`
        id,
        name,
        sku,
        price,
        organization_id
      `, { count: 'exact' })
      .range(offset, offset + limit - 1)
      .order('name', { ascending: true });
    
    if (error) {
      console.error('‚ùå Database error:', error);
      return res.status(500).json({ error: 'Database query failed', details: error.message });
    }
    
    if (!products || products.length === 0) {
      console.log('‚ö†Ô∏è No products found in database');
      return res.json({
        data: [],
        pagination: {
          page: page,
          limit: limit,
          total: 0,
          totalPages: 0,
          hasNext: false,
          hasPrev: false
        }
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã operations –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const productIds = products.map(p => p.id);
    
    const { data: stockData, error: stockError } = await supabaseAdmin
      .from('operations')
      .select(`
        product_id,
        location_id,
        stock_on_hand,
        locations (
          id,
          name,
          type
        )
      `)
      .in('product_id', productIds)
      .not('stock_on_hand', 'is', null)
      .order('operation_date', { ascending: false });
    
    if (stockError) {
      console.warn('‚ö†Ô∏è Could not fetch stock data:', stockError.message);
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ –ª–æ–∫–∞—Ü–∏—è–º (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
    const stockByProduct: any = {};
    if (stockData) {
      stockData.forEach((stock: any) => {
        const productId = stock.product_id;
        const locationId = stock.location_id;
        const key = `${productId}_${locationId}`;
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç-–ª–æ–∫–∞—Ü–∏—è (—Å–∞–º–∞—è —Å–≤–µ–∂–∞—è)
        if (!stockByProduct[key]) {
          stockByProduct[key] = {
            location_id: locationId,
            location_name: stock.locations?.name || `–õ–æ–∫–∞—Ü–∏—è ${locationId}`,
            location_type: stock.locations?.type || 'unknown',
            stock: stock.stock_on_hand || 0
          };
        }
      });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
    const formattedProducts = products.map((product: any) => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      const productStocks = Object.values(stockByProduct).filter((stock: any) => 
        Object.keys(stockByProduct).some(key => 
          key.startsWith(`${product.id}_`) && stockByProduct[key] === stock
        )
      );
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
      if (productStocks.length === 0) {
        productStocks.push({
          location_id: 1,
          location_name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥',
          location_type: 'warehouse',
          stock: 0
        });
      }
      
      return {
        product_id: product.id,
        product_name: product.name,
        sku: product.sku || `SKU-${product.id}`,
        price: product.price || 0,
        organization_id: product.organization_id,
        stock_by_location: productStocks
      };
    });
    
    console.log(`‚úÖ Successfully fetched ${formattedProducts.length} of ${count} REAL products from database`);
    console.log(`üìä Pagination info: page ${page}, showing ${formattedProducts.length} items, total ${count}`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    res.json({
      data: formattedProducts,
      pagination: {
        page: page,
        limit: limit,
        total: count,
        totalPages: Math.ceil((count || 0) / limit),
        hasNext: page * limit < (count || 0),
        hasPrev: page > 1
      }
    });
    
  } catch (error) {
    console.error('üí• Unexpected error:', error);
    res.status(500).json({ 
      error: 'Failed to fetch products from database', 
      details: error instanceof Error ? error.message : String(error) 
    });
  }
});

// –¢–ï–°–¢–û–í–´–ô –ú–ê–†–®–†–£–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/test-db', async (req, res) => {
  try {
    console.log('=== Testing database connection (no auth) ===');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ products
    const { data: products, error } = await supabaseAdmin
      .from('products')
      .select(`
        id,
        name,
        sku,
        price,
        organization_id
      `)
      .limit(5);
    
    if (error) {
      console.error('Database error:', error);
      return res.status(500).json({ error: 'Database query failed', details: error.message });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedProducts = products?.map((product: any) => ({
      product_id: product.id,
      product_name: product.name,
      sku: product.sku || `SKU-${product.id}`,
      price: product.price || 0,
      stock_by_location: [
        // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω—É–∂–µ–Ω —Å–ª–æ–∂–Ω—ã–π JOIN
        { location_id: 1, location_name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', stock: Math.floor(Math.random() * 50) }
      ]
    })) || [];
    
    console.log(`‚úÖ Found ${formattedProducts.length} products in database:`, formattedProducts.map((p: any) => p.product_name));
    res.json(formattedProducts);
    
  } catch (error) {
    console.error('‚ùå Route error:', error);
    res.status(500).json({ 
      error: 'Failed to fetch products from database', 
      details: error instanceof Error ? error.message : String(error) 
    });
  }
});

// Simple test route directly in app.ts
app.get('/api/test', (req, res) => {
  console.log('=== Direct test route called ===');
  res.json({ success: true, message: 'Direct test route works', timestamp: new Date().toISOString() });
});

// –í–†–ï–ú–ï–ù–ù–´–ô –¢–ï–°–¢–û–í–´–ô –ú–ê–†–®–†–£–¢: –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
app.get('/api/inventory/products-direct', async (req, res) => {
  try {
    console.log('=== Testing direct database connection ===');
    
    // –ò–º–ø–æ—Ä—Ç getSupabaseUserClient
    const { getSupabaseUserClient } = require('./supabaseUserClient');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º service role (–ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!)
    const supabase = getSupabaseUserClient(process.env.SUPABASE_SERVICE_ROLE_KEY || '');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ products
    const { data: products, error } = await supabase
      .from('products')
      .select(`
        id,
        name,
        sku,
        price,
        organization_id
      `)
      .limit(10);
    
    if (error) {
      console.error('Database error:', error);
      return res.status(500).json({ error: 'Database query failed', details: error.message });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedProducts = products?.map((product: any) => ({
      product_id: product.id,
      product_name: product.name,
      sku: product.sku || `SKU-${product.id}`,
      price: product.price || 0,
      stock_by_location: [
        // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω—É–∂–µ–Ω —Å–ª–æ–∂–Ω—ã–π JOIN
        { location_id: 1, location_name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', stock: Math.floor(Math.random() * 50) }
      ]
    })) || [];
    
    console.log(`Found ${formattedProducts.length} products in database`);
    res.json(formattedProducts);
    
  } catch (error) {
    console.error('Route error:', error);
    res.status(500).json({ 
      error: 'Failed to fetch products from database', 
      details: error instanceof Error ? error.message : String(error) 
    });
  }
});

// Import all route files
import authRoutes from './routes/authRoutes';
import healthRoutes from './routes/healthRoutes';
import monetizationRoutes from './routes/monetizationRoutes';
import forecastRoutes from './routes/forecastRoutes';
import adminRoutes from './routes/adminRoutes';
import uploadRoutes from './routes/uploadRoutes';
import userPreferencesRoutes from './routes/userPreferencesRoutes';
import userRoutes from './routes/userRoutes';
import inventoryRoutes from './routes/inventoryRoutes';
import organizationRoutes from './routes/organizationRoutes';
import mlRoutes from './routes/mlRoutes';

// Mount all routes with explicit paths
app.use('/api/auth', authRoutes);
app.use('/api/health', healthRoutes);
app.use('/api/monetization', monetizationRoutes);
app.use('/api/forecast', forecastRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/preferences', userPreferencesRoutes);
app.use('/api/users', userRoutes);
app.use('/api/inventory', inventoryRoutes);
app.use('/api/organizations', organizationRoutes);
app.use('/api/ml', mlRoutes);

// Error handler
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error("--- ERROR ---", err); // Always log the full error

  if (isProduction) {
    // In production, send a generic message
    res.status(500).json({ error: 'Internal Server Error' });
  } else {
    // In development, send detailed error
    res.status(500).json({ error: 'Something went wrong!', details: err.message, stack: err.stack });
  }
});

// Start server
const PORT = process.env.PORT || 3000;//Changed to 3001 to avoid conflicts
if (isProduction) {
  // In a production environment, we expect the server to be run via a process manager (like PM2)
  // that handles clustering and restarts.
  app.listen(PORT, () => {
    console.log(`[SERVER START] üöÄ Server successfully started and listening on port ${PORT}`);
    console.log(`[SERVER START] Start time: ${new Date().toISOString()}`);
  });
} else {
  // In a development environment, we can simply listen on the port.
  app.listen(PORT, () => {
    console.log(`[SERVER START] üöÄ Server successfully started and listening on port ${PORT}`);
    console.log(`[SERVER START] Start time: ${new Date().toISOString()}`);
  }).on('error', (error) => {
    console.error('[SERVER ERROR] ‚ùå Failed to start server:', error);
    process.exit(1);
  });
}

console.log('[APP END] app.ts script has finished execution.');

export default app;