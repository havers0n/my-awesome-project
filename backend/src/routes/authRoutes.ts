import * as express from 'express';
import { resetPassword, getProfile } from '../controllers/authController';
import { updateProfile } from '../controllers/userController';
import { authenticate } from '../middleware/authenticate';

console.log('üîç authRoutes.ts: Loading auth routes...');

const router = express.Router();

// Public routes
router.post('/reset-password', resetPassword);
router.get('/test', (req, res) => {
  res.json({ message: 'Auth routes are working!', timestamp: new Date() });
});

// Protected routes
router.get('/me', authenticate, (req, res) => {
  // –¢–µ–ø–µ—Ä—å req.user –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è middleware
  if (req.user) {
    res.json({
      id: req.user.id,
      email: req.user.email,
      role: req.user.role,
      organization_id: req.user.organization_id,
      location_id: req.user.location_id,
      authType: req.user.authType,
    });
  } else {
    // –≠—Ç–∞ –≤–µ—Ç–∫–∞ –ø–æ –∏–¥–µ–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –µ—Å–ª–∏ authenticate —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    res.status(401).json({ error: 'Authentication failed' });
  }
});
router.put('/profile', authenticate, updateProfile);

console.log('üîç authRoutes.ts: About to register profile route...');
console.log('üîç authRoutes.ts: Profile route registered successfully');

export default router; 