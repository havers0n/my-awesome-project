require('dotenv').config();
const { getProducts } = require('./dist/controllers/inventoryController.js');

async function testControllerDirectly() {
  try {
    console.log('üîç –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –ö–û–ù–¢–†–û–õ–õ–ï–†–ê inventoryController.getProducts');
    console.log('='.repeat(60));
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã req –∏ res
    const mockReq = {
      user: { organization_id: 1 },
      headers: {}
    };
    
    let responseData = null;
    let responseStatus = null;
    
    const mockRes = {
      status: (code) => {
        responseStatus = code;
        return mockRes;
      },
      json: (data) => {
        responseData = data;
        console.log(`üìä Response Status: ${responseStatus || 200}`);
        console.log(`üìä Response Data:`, JSON.stringify(data, null, 2));
      }
    };
    
    console.log('üöÄ –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
    await getProducts(mockReq, mockRes);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    
    if (responseData) {
      console.log('‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ');
      
      if (responseData.data && Array.isArray(responseData.data)) {
        console.log(`üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${responseData.data.length}`);
        
        if (responseData.data.length > 0) {
          const firstProduct = responseData.data[0];
          console.log('\nüìã –ü–ï–†–í–´–ô –ü–†–û–î–£–ö–¢:');
          console.log(`Name: ${firstProduct.product_name}`);
          console.log(`ID: ${firstProduct.product_id}`);
          console.log(`Current Stock: ${firstProduct.current_stock} (—Ç–∏–ø: ${typeof firstProduct.current_stock})`);
          console.log(`Stock Status: ${firstProduct.stock_status}`);
          console.log(`SKU: ${firstProduct.sku}`);
          console.log(`Price: ${firstProduct.price}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
          const productsWithStock = responseData.data.filter(p => p.current_stock && p.current_stock > 0);
          const productsWithZeroStock = responseData.data.filter(p => !p.current_stock || p.current_stock === 0);
          
          console.log('\nüìä –ê–ù–ê–õ–ò–ó –û–°–¢–ê–¢–ö–û–í:');
          console.log(`–ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0: ${productsWithStock.length}`);
          console.log(`–ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: ${productsWithZeroStock.length}`);
          
          if (productsWithStock.length > 0) {
            console.log('\n‚úÖ –ü–†–û–î–£–ö–¢–´ –° –û–°–¢–ê–¢–ö–ê–ú–ò:');
            productsWithStock.slice(0, 5).forEach((product, index) => {
              console.log(`${index + 1}. ${product.product_name}: ${product.current_stock}`);
            });
          }
          
          if (productsWithZeroStock.length > 0) {
            console.log('\n‚ùå –ü–†–û–î–£–ö–¢–´ –ë–ï–ó –û–°–¢–ê–¢–ö–û–í:');
            productsWithZeroStock.slice(0, 5).forEach((product, index) => {
              console.log(`${index + 1}. ${product.product_name}: ${product.current_stock}`);
            });
          }
        }
      } else {
        console.log('‚ùå responseData.data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
    } else {
      console.log('‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ');
    }
    
    console.log('\nüéØ –î–ò–ê–ì–ù–û–ó:');
    
    if (responseData && responseData.data && responseData.data.length > 0) {
      const hasStock = responseData.data.some(p => p.current_stock && p.current_stock > 0);
      if (hasStock) {
        console.log('‚úÖ –ö–û–ù–¢–†–û–õ–õ–ï–† –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏!');
        console.log('‚û°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ backend –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ');
        console.log('‚û°Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ HTTP —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ frontend');
      } else {
        console.log('‚ùå –ö–û–ù–¢–†–û–õ–õ–ï–† –í–û–ó–í–†–ê–©–ê–ï–¢ –ù–£–õ–ï–í–´–ï –û–°–¢–ê–¢–ö–ò');
        console.log('‚û°Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ VIEW');
      }
    } else {
      console.log('‚ùå –ö–û–ù–¢–†–û–õ–õ–ï–† –ù–ï –í–û–ó–í–†–ê–©–ê–ï–¢ –ü–†–û–î–£–ö–¢–´');
      console.log('‚û°Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ');
    }
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:');
    console.error(error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
testControllerDirectly(); 