require('dotenv').config();
const { supabaseAdmin } = require('./dist/supabaseAdminClient.js');

async function testDirectView() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û –ó–ê–ü–†–û–°–ê –ö current_stock_view');
    console.log('='.repeat(60));
    
    const organizationId = 1;
    
    console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è organization_id: ${organizationId}`);
    
    // –¢–û–ß–ù–û —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å —á—Ç–æ –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    console.log('\n‚úÖ –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö current_stock_view:');
    
    const { data, error } = await supabaseAdmin
      .from('current_stock_view')
      .select('*')
      .eq('organization_id', organizationId)
      .order('product_name')
      .limit(5);

    if (error) {
      console.error('‚ùå –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error);
      return;
    }

    console.log(`‚úÖ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    if (!data || data.length === 0) {
      console.log('‚ö†Ô∏è –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüì¶ –î–ê–ù–ù–´–ï –ò–ó current_stock_view:');
    data.forEach((item, index) => {
      console.log(`\n${index + 1}. ${item.product_name}`);
      console.log(`   - Product ID: ${item.product_id}`);
      console.log(`   - SKU: ${item.sku}`);
      console.log(`   - –û—Å—Ç–∞—Ç–æ–∫: ${item.current_stock}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${item.stock_status}`);
      console.log(`   - –õ–æ–∫–∞—Ü–∏–π: ${item.locations_with_stock}`);
      console.log(`   - –¶–µ–Ω–∞: ${item.price}`);
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
    console.log('\nüîç –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –ü–û –õ–û–ö–ê–¶–ò–Ø–ú:');
    
    const { data: locationStockData, error: locationError } = await supabaseAdmin
      .from('stock_by_location_view')
      .select('*')
      .eq('organization_id', organizationId);

    if (locationError) {
      console.warn('‚ö†Ô∏è Could not fetch location details:', locationError);
    } else {
      console.log(`‚úÖ Location data: ${locationStockData?.length || 0} records`);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
    console.log('\nüîß –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ö –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ï:');
    
    const formattedProducts = data.map((item) => {
      // –ù–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      const stockByLocation = (locationStockData || [])
        .filter((loc) => loc.product_id === item.product_id)
        .map((loc) => ({
          location_id: loc.location_id,
          location_name: loc.location_name,
          stock: Number(loc.stock) || 0
        }));

      return {
        product_id: item.product_id,
        product_name: item.product_name,
        sku: item.sku,
        code: item.code,
        price: Number(item.price) || 0,
        stock_by_location: stockByLocation,
        created_at: item.created_at,
        updated_at: item.updated_at,
        // –ü–æ–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —É–∂–µ –µ—Å—Ç—å –≤ current_stock_view
        current_stock: Number(item.current_stock) || 0,
        stock_status: item.stock_status || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        locations_with_stock: Number(item.locations_with_stock) || 0
      };
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', formattedProducts.length);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç frontend
    console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç frontend):');
    
    const apiResponse = {
      data: formattedProducts,
      pagination: {
        page: 1,
        limit: 100,
        total: formattedProducts.length
      }
    };

    console.log(JSON.stringify(apiResponse, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    const hasStockData = formattedProducts.some(p => p.current_stock > 0);
    const totalStock = formattedProducts.reduce((sum, p) => sum + p.current_stock, 0);
    
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –û–°–¢–ê–¢–ö–û–í:');
    console.log(`–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º: ${totalStock}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0: ${formattedProducts.filter(p => p.current_stock > 0).length}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –ª–æ–∫–∞—Ü–∏—è–º: ${formattedProducts.filter(p => p.stock_by_location.length > 0).length}`);

    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:');
    if (hasStockData) {
      console.log('üéâ –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö current_stock_view –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('üéâ –ï—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏!');
      console.log('üéâ API –≤–µ—Ä–Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ frontend!');
    } else {
      console.log('‚ö†Ô∏è –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é');
    }

    console.log('\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:');
    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å /api/inventory/products');
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
  }
}

console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ current_stock_view...');
testDirectView(); 