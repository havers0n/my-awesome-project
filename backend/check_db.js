// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç supabase
  const supabaseUrl = process.env.SUPABASE_URL || process.env.REACT_APP_SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;
  
  console.log('Supabase URL:', supabaseUrl ? `${supabaseUrl.substring(0, 30)}...` : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('Supabase Key:', supabaseKey ? `${supabaseKey.substring(0, 20)}...` : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    process.exit(1);
  }
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É products
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É products...');
    const { data: products, error, count } = await supabase
      .from('products')
      .select('id, name, sku, price, organization_id', { count: 'exact' })
      .limit(5);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:', error.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–î: ${count}`);
    
    if (products && products.length > 0) {
      console.log('\nüìã –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:');
      products.forEach((product, index) => {
        console.log(`  ${index + 1}. ${product.name} (ID: ${product.id}, SKU: ${product.sku || '–Ω–µ—Ç'}, –¶–µ–Ω–∞: ${product.price || 0})`);
      });
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É locations
    console.log('\nüè™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É locations...');
    const { data: locations, error: locError, count: locCount } = await supabase
      .from('locations')
      .select('id, name, type', { count: 'exact' })
      .limit(3);
    
    if (locError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ locations:', locError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π –≤ –ë–î: ${locCount}`);
      if (locations && locations.length > 0) {
        locations.forEach((loc, index) => {
          console.log(`  ${index + 1}. ${loc.name} (ID: ${loc.id}, –¢–∏–ø: ${loc.type})`);
        });
      }
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

checkDatabase(); 