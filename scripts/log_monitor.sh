#!/bin/bash

# log_monitor.sh - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./log_monitor.sh [--watch]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –ª–æ–≥–æ–≤
check_backend_logs() {
    echo "=== 1. Backend –ª–æ–≥–∏ ==="
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
    local backend_logs=()
    for pattern in "backend.log" "backend*.log" "logs/backend*.log" "dist/backend*.log"; do
        if ls $pattern 2>/dev/null; then
            backend_logs+=($pattern)
        fi
    done
    
    if [ ${#backend_logs[@]} -eq 0 ]; then
        log_warn "Backend –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω."
        return 1
    fi
    
    local log_file=${backend_logs[0]}
    log_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: $log_file"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    echo "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:"
    if grep -q "=== ML REQUEST DATA" "$log_file" 2>/dev/null; then
        tail -n 100 "$log_file" | grep -E "(=== ML REQUEST DATA|--- FINAL PAYLOAD)" | tail -5
    else
        log_warn "–ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:"
    if grep -q "VALIDATION ERROR" "$log_file" 2>/dev/null; then
        log_error "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!"
        tail -n 100 "$log_file" | grep -E "(VALIDATION ERROR|422)" | tail -3
    else
        log_info "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:"
    if grep -A 5 "=== ML REQUEST DATA" "$log_file" 2>/dev/null | grep -q "DaysCount"; then
        log_info "–§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (DaysCount –Ω–∞–π–¥–µ–Ω)"
    else
        log_warn "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
    if grep -A 20 "=== ML REQUEST DATA" "$log_file" 2>/dev/null | grep -q '"–ü–µ—Ä–∏–æ–¥":"[0-9]{4}-[0-9]{2}-[0-9]{2}"'; then
        log_info "–§–æ—Ä–º–∞—Ç –¥–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (YYYY-MM-DD)"
    else
        log_warn "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç"
    fi
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ML-—Å–µ—Ä–≤–∏—Å–∞
check_ml_service() {
    echo "=== 2. ML-—Å–µ—Ä–≤–∏—Å ==="
    
    local ml_url="http://localhost:5678"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if curl -s -f "$ml_url/health" > /dev/null 2>&1; then
        log_info "ML-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        local status=$(curl -s "$ml_url/health" | python3 -c "import sys, json; print(json.load(sys.stdin)['status'])" 2>/dev/null || echo "unknown")
        if [ "$status" = "ok" ]; then
            log_info "–°—Ç–∞—Ç—É—Å: OK"
        else
            log_warn "–°—Ç–∞—Ç—É—Å: $status"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        local model_loaded=$(curl -s "$ml_url/health" | python3 -c "import sys, json; print(json.load(sys.stdin)['model_loaded'])" 2>/dev/null || echo "unknown")
        if [ "$model_loaded" = "True" ]; then
            log_info "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        else
            log_error "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!"
        fi
        
    else
        log_error "ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 5678)"
        log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: cd ml && python -m uvicorn api_main:app --host 0.0.0.0 --port 5678"
    fi
    
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ML-—Å–µ—Ä–≤–∏—Å–∞
    echo "üìã ML-—Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏:"
    local ml_logs=()
    for pattern in "ml_service.log" "ml/*.log" "logs/ml*.log"; do
        if ls $pattern 2>/dev/null; then
            ml_logs+=($pattern)
        fi
    done
    
    if [ ${#ml_logs[@]} -gt 0 ]; then
        local ml_log=${ml_logs[0]}
        log_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: $ml_log"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        if grep -q "ERROR" "$ml_log" 2>/dev/null; then
            log_warn "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ ML-—Å–µ—Ä–≤–∏—Å–µ:"
            tail -n 50 "$ml_log" | grep "ERROR" | tail -3
        else
            log_info "–û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö ML-—Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ unseen labels
        if grep -q "y contains previously unseen labels" "$ml_log" 2>/dev/null; then
            log_error "–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö!"
            tail -n 50 "$ml_log" | grep -B 2 -A 2 "unseen labels" | tail -5
        else
            log_info "–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
    else
        log_warn "–õ–æ–≥–∏ ML-—Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
check_frontend() {
    echo "=== 3. Frontend ==="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend
    if curl -s -f "http://localhost:3000" > /dev/null 2>&1; then
        log_info "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 3000)"
    else
        log_warn "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 3000)"
        log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: cd frontend && npm run dev"
    fi
    
    echo "üì± –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ frontend –ª–æ–≥–æ–≤:"
    echo "   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä ‚Üí DevTools (F12)"
    echo "   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Console"
    echo "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ:"
    echo "      ‚úì 'Forecast prediction initiated successfully'"
    echo "      ‚úó 'Failed to start forecast prediction'"
    echo "      ‚úó 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏'"
    
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
check_system_health() {
    echo "=== 4. –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ==="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    echo "üîÑ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    
    if pgrep -f "node.*backend" > /dev/null; then
        log_info "Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    else
        log_warn "Backend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if pgrep -f "python.*uvicorn.*api_main" > /dev/null; then
        log_info "ML-—Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    else
        log_warn "ML-—Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if pgrep -f "node.*vite" > /dev/null; then
        log_info "Frontend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    else
        log_warn "Frontend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    echo "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
    
    if netstat -tuln 2>/dev/null | grep -q ":3000"; then
        log_info "–ü–æ—Ä—Ç 3000 (backend) –æ—Ç–∫—Ä—ã—Ç"
    else
        log_warn "–ü–æ—Ä—Ç 3000 (backend) –∑–∞–∫—Ä—ã—Ç"
    fi
    
    if netstat -tuln 2>/dev/null | grep -q ":5678"; then
        log_info "–ü–æ—Ä—Ç 5678 (ML-—Å–µ—Ä–≤–∏—Å) –æ—Ç–∫—Ä—ã—Ç"
    else
        log_warn "–ü–æ—Ä—Ç 5678 (ML-—Å–µ—Ä–≤–∏—Å) –∑–∞–∫—Ä—ã—Ç"
    fi
    
    echo
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo "=== 5. –û—Ç—á–µ—Ç ==="
    
    local report_file="log_monitor_report_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: $report_file"
    
    {
        echo "–û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML-—Å–∏—Å—Ç–µ–º—ã"
        echo "–î–∞—Ç–∞: $(date)"
        echo "=========================="
        echo
        
        echo "Backend –ª–æ–≥–∏:"
        check_backend_logs 2>&1
        echo
        
        echo "ML-—Å–µ—Ä–≤–∏—Å:"
        check_ml_service 2>&1
        echo
        
        echo "Frontend:"
        check_frontend 2>&1
        echo
        
        echo "–°–∏—Å—Ç–µ–º–∞:"
        check_system_health 2>&1
        
    } > "$report_file"
    
    log_info "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
}

# –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
watch_mode() {
    echo "üîç –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)"
    echo "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    echo
    
    while true; do
        clear
        echo "=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã ==="
        echo "–í—Ä–µ–º—è: $(date)"
        echo
        
        check_backend_logs
        check_ml_service
        check_frontend
        
        sleep 30
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã"
    echo "–î–∞—Ç–∞: $(date)"
    echo
    
    if [ "$1" = "--watch" ]; then
        watch_mode
    else
        check_backend_logs
        check_ml_service
        check_frontend
        check_system_health
        
        if [ "$1" = "--report" ]; then
            generate_report
        fi
    fi
    
    echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ó–∞–ø—É—Å–∫
main "$@"
