# log_monitor.ps1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è Windows
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\log_monitor.ps1 [-Watch] [-Report]

param(
    [switch]$Watch,
    [switch]$Report
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Warn {
    param([string]$Message)
    Write-Host "[WARN] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –ª–æ–≥–æ–≤
function Check-BackendLogs {
    Write-Host "=== 1. Backend –ª–æ–≥–∏ ===" -ForegroundColor Cyan
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
    $backendLogs = @()
    $patterns = @("backend.log", "backend*.log", "logs\backend*.log", "dist\backend*.log")
    
    foreach ($pattern in $patterns) {
        $files = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue
        if ($files) {
            $backendLogs += $files
        }
    }
    
    if ($backendLogs.Count -eq 0) {
        Write-Warn "Backend –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω."
        return $false
    }
    
    $logFile = $backendLogs[0].FullName
    Write-Info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: $logFile"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    Write-Host "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:" -ForegroundColor Blue
    
    if (Select-String -Path $logFile -Pattern "=== ML REQUEST DATA" -ErrorAction SilentlyContinue) {
        Get-Content $logFile | Select-String -Pattern "(=== ML REQUEST DATA|--- FINAL PAYLOAD)" | Select-Object -Last 5
    } else {
        Write-Warn "–ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    }
    
    Write-Host
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:" -ForegroundColor Blue
    
    if (Select-String -Path $logFile -Pattern "VALIDATION ERROR" -ErrorAction SilentlyContinue) {
        Write-Error "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!"
        Get-Content $logFile | Select-String -Pattern "VALIDATION ERROR" | Select-Object -Last 3
        Get-Content $logFile | Select-String -Pattern "422" | Select-Object -Last 3
    } else {
        Write-Info "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    }
    
    Write-Host
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:" -ForegroundColor Blue
    
    $mlRequestData = Get-Content $logFile | Select-String -Pattern "=== ML REQUEST DATA" -Context 0,5 -ErrorAction SilentlyContinue
    if ($mlRequestData -and ($mlRequestData | Select-String -Pattern "DaysCount")) {
        Write-Info "–§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (DaysCount –Ω–∞–π–¥–µ–Ω)"
    } else {
        Write-Warn "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
    $datePattern = '"–ü–µ—Ä–∏–æ–¥":"\\d{4}-\\d{2}-\\d{2}"'
    if ($mlRequestData -and ($mlRequestData | Select-String -Pattern $datePattern)) {
        Write-Info "–§–æ—Ä–º–∞—Ç –¥–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (YYYY-MM-DD)"
    } else {
        Write-Warn "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç"
    }
    
    Write-Host
    return $true
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ML-—Å–µ—Ä–≤–∏—Å–∞
function Check-MLService {
    Write-Host "=== 2. ML-—Å–µ—Ä–≤–∏—Å ===" -ForegroundColor Cyan
    
    $mlUrl = "http://localhost:5678"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    try {
        $response = Invoke-RestMethod -Uri "$mlUrl/health" -Method Get -TimeoutSec 5
        Write-Info "ML-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if ($response.status -eq "ok") {
            Write-Info "–°—Ç–∞—Ç—É—Å: OK"
        } else {
            Write-Warn "–°—Ç–∞—Ç—É—Å: $($response.status)"
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        if ($response.model_loaded -eq $true) {
            Write-Info "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        } else {
            Write-Error "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!"
        }
        
    } catch {
        Write-Error "ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 5678)"
        Write-Info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: cd ml; python -m uvicorn api_main:app --host 0.0.0.0 --port 5678"
    }
    
    Write-Host
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ML-—Å–µ—Ä–≤–∏—Å–∞
    Write-Host "üìã ML-—Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏:" -ForegroundColor Blue
    
    $mlLogs = @()
    $patterns = @("ml_service.log", "ml\*.log", "logs\ml*.log")
    
    foreach ($pattern in $patterns) {
        $files = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue
        if ($files) {
            $mlLogs += $files
        }
    }
    
    if ($mlLogs.Count -gt 0) {
        $mlLog = $mlLogs[0].FullName
        Write-Info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: $mlLog"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        if (Select-String -Path $mlLog -Pattern "ERROR" -ErrorAction SilentlyContinue) {
            Write-Warn "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ ML-—Å–µ—Ä–≤–∏—Å–µ:"
            Get-Content $mlLog | Select-String -Pattern "ERROR" | Select-Object -Last 3
        } else {
            Write-Info "–û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö ML-—Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ unseen labels
        if (Select-String -Path $mlLog -Pattern "y contains previously unseen labels" -ErrorAction SilentlyContinue) {
            Write-Error "–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö!"
            Get-Content $mlLog | Select-String -Pattern "unseen labels" -Context 2,2 | Select-Object -Last 5
        } else {
            Write-Info "–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        }
        
    } else {
        Write-Warn "–õ–æ–≥–∏ ML-—Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    }
    
    Write-Host
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
function Check-Frontend {
    Write-Host "=== 3. Frontend ===" -ForegroundColor Cyan
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000" -Method Head -TimeoutSec 5 -ErrorAction Stop
        Write-Info "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 3000)"
    } catch {
        Write-Warn "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ—Ä—Ç 3000)"
        Write-Info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: cd frontend; npm run dev"
    }
    
    Write-Host "üì± –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ frontend –ª–æ–≥–æ–≤:" -ForegroundColor Blue
    Write-Host "   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä ‚Üí DevTools (F12)"
    Write-Host "   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Console"
    Write-Host "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
    Write-Host "   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ:"
    Write-Host "      ‚úì 'Forecast prediction initiated successfully'" -ForegroundColor Green
    Write-Host "      ‚úó 'Failed to start forecast prediction'" -ForegroundColor Red
    Write-Host "      ‚úó 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏'" -ForegroundColor Red
    
    Write-Host
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
function Check-SystemHealth {
    Write-Host "=== 4. –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ===" -ForegroundColor Cyan
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    Write-Host "üîÑ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:" -ForegroundColor Blue
    
    if (Get-Process | Where-Object { $_.ProcessName -eq "node" -and $_.CommandLine -like "*backend*" }) {
        Write-Info "Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    } else {
        Write-Warn "Backend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
    
    if (Get-Process | Where-Object { $_.ProcessName -eq "python" -and $_.CommandLine -like "*uvicorn*api_main*" }) {
        Write-Info "ML-—Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    } else {
        Write-Warn "ML-—Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
    
    if (Get-Process | Where-Object { $_.ProcessName -eq "node" -and $_.CommandLine -like "*vite*" }) {
        Write-Info "Frontend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    } else {
        Write-Warn "Frontend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
    
    Write-Host
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    Write-Host "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:" -ForegroundColor Blue
    
    if (Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue) {
        Write-Info "–ü–æ—Ä—Ç 3000 (backend) –æ—Ç–∫—Ä—ã—Ç"
    } else {
        Write-Warn "–ü–æ—Ä—Ç 3000 (backend) –∑–∞–∫—Ä—ã—Ç"
    }
    
    if (Get-NetTCPConnection -LocalPort 5678 -ErrorAction SilentlyContinue) {
        Write-Info "–ü–æ—Ä—Ç 5678 (ML-—Å–µ—Ä–≤–∏—Å) –æ—Ç–∫—Ä—ã—Ç"
    } else {
        Write-Warn "–ü–æ—Ä—Ç 5678 (ML-—Å–µ—Ä–≤–∏—Å) –∑–∞–∫—Ä—ã—Ç"
    }
    
    Write-Host
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function Generate-Report {
    Write-Host "=== 5. –û—Ç—á–µ—Ç ===" -ForegroundColor Cyan
    
    $reportFile = "log_monitor_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
    
    Write-Host "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: $reportFile" -ForegroundColor Blue
    
    $report = @"
–û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML-—Å–∏—Å—Ç–µ–º—ã
–î–∞—Ç–∞: $(Get-Date)
==========================

Backend –ª–æ–≥–∏:
$(Check-BackendLogs *>&1)

ML-—Å–µ—Ä–≤–∏—Å:
$(Check-MLService *>&1)

Frontend:
$(Check-Frontend *>&1)

–°–∏—Å—Ç–µ–º–∞:
$(Check-SystemHealth *>&1)
"@
    
    $report | Out-File -FilePath $reportFile -Encoding UTF8
    Write-Info "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $reportFile"
}

# –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
function Watch-Mode {
    Write-Host "üîç –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)" -ForegroundColor Yellow
    Write-Host "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C" -ForegroundColor Yellow
    Write-Host
    
    while ($true) {
        Clear-Host
        Write-Host "=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã ===" -ForegroundColor Magenta
        Write-Host "–í—Ä–µ–º—è: $(Get-Date)" -ForegroundColor Gray
        Write-Host
        
        Check-BackendLogs | Out-Null
        Check-MLService
        Check-Frontend
        
        Start-Sleep -Seconds 30
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host "üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã" -ForegroundColor Magenta
    Write-Host "–î–∞—Ç–∞: $(Get-Date)" -ForegroundColor Gray
    Write-Host
    
    if ($Watch) {
        Watch-Mode
    } else {
        Check-BackendLogs | Out-Null
        Check-MLService
        Check-Frontend
        Check-SystemHealth
        
        if ($Report) {
            Generate-Report
        }
    }
    
    Write-Host "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green
}

# –ó–∞–ø—É—Å–∫
Main
