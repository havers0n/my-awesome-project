import requests
import json

def test_with_auth():
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô")
    print("=" * 55)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    login_data = {
        "email": "admin@example.com",
        "password": "admin123"
    }
    
    try:
        login_response = requests.post(
            "http://localhost:3000/api/auth/login",
            headers={"Content-Type": "application/json"},
            data=json.dumps(login_data)
        )
        
        if login_response.status_code == 200:
            token_data = login_response.json()
            token = token_data.get('token') or token_data.get('accessToken')
            if token:
                print(f"   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {token}"
                }
            else:
                print("   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"      –û—Ç–≤–µ—Ç: {token_data}")
                return
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {login_response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {login_response.text}")
            return
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    print("\n2. –¢–µ—Å—Ç CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    try:
        csv_products_response = requests.get(
            "http://localhost:3000/api/forecast/csv-products",
            headers=headers
        )
        
        if csv_products_response.status_code == 200:
            products_data = csv_products_response.json()
            products = products_data.get('data', [])
            print(f"   ‚úÖ CSV –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
            print("   üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
            for i, product in enumerate(products[:5]):
                name = product.get('product_name', 'N/A')
                mape = product.get('mape', 'N/A')
                print(f"      {i+1}. {name} (MAPE: {mape}%)")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {csv_products_response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {csv_products_response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ CSV –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    print("\n3. –¢–µ—Å—Ç CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    try:
        csv_forecast_payload = {"DaysCount": 7}
        csv_forecast_response = requests.post(
            "http://localhost:3000/api/forecast/predict-csv",
            headers=headers,
            data=json.dumps(csv_forecast_payload),
            timeout=30
        )
        
        if csv_forecast_response.status_code == 200:
            forecast_data = csv_forecast_response.json()
            print(f"   ‚úÖ CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"      –°–æ–æ–±—â–µ–Ω–∏–µ: {forecast_data.get('message', 'N/A')}")
            print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {forecast_data.get('data', {}).get('source', 'N/A')}")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {forecast_data.get('data', {}).get('totalProducts', 'N/A')}")
        elif csv_forecast_response.status_code == 502:
            print(f"   ‚ùå CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: ML —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"      –û—Ç–≤–µ—Ç: {csv_forecast_response.text}")
        else:
            print(f"   ‚ùå CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ {csv_forecast_response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {csv_forecast_response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ CSV –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç CSV –º–µ—Ç—Ä–∏–∫ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    print("\n4. –¢–µ—Å—Ç CSV –º–µ—Ç—Ä–∏–∫ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    try:
        csv_metrics_response = requests.get(
            "http://localhost:3000/api/forecast/csv-metrics",
            headers=headers
        )
        
        if csv_metrics_response.status_code == 200:
            metrics_data = csv_metrics_response.json()
            data = metrics_data.get('data', {})
            print(f"   ‚úÖ CSV –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"      –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {data.get('totalProducts', 'N/A')}")
            print(f"      –°—Ä–µ–¥–Ω–∏–π MAPE: {data.get('avgMape', 'N/A')}%")
            print(f"      –°—Ä–µ–¥–Ω–∏–π MAE: {data.get('avgMae', 'N/A')}")
            print(f"      –°—Ä–µ–¥–Ω–∏–π RMSE: {data.get('avgRmse', 'N/A')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSV –º–µ—Ç—Ä–∏–∫: {csv_metrics_response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {csv_metrics_response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ CSV –º–µ—Ç—Ä–∏–∫: {e}")
    
    print("\n5. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    print("   üéØ –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("   üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5173/sales-forecast-csv")

if __name__ == "__main__":
    test_with_auth() 