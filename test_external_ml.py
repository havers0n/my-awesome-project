#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ ML –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import requests
import json
import sys
import os

def test_external_ml_service(base_url):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π ML —Å–µ—Ä–≤–∏—Å –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    """
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞: {base_url}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ê–ª–µ–∫—Å–µ—è
    test_payload = {
        "DaysCount": 30,
        "events": [
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": "2025-07-15T00:00:00",
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ú–æ–ª–æ–∫–æ \"–î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ\" 1–ª",
                "–ö–æ–¥": "123456"
            },
            {
                "Type": "–ü—Ä–æ–¥–∞–∂–∞",
                "–ü–µ—Ä–∏–æ–¥": "2025-07-15T00:00:00",
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–ô–æ–≥—É—Ä—Ç \"–ß—É–¥–æ\" –∫–ª—É–±–Ω–∏—á–Ω—ã–π 200–≥",
                "–ö–æ–¥": "YOG-205"
            }
        ]
    }
    
    # 1. –¢–µ—Å—Ç health endpoint
    print("\n1. üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...")
    health_url = base_url.replace('/predict', '/health')
    try:
        response = requests.get(health_url, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            try:
                health_data = response.json()
                print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'Unknown')}")
                print(f"   –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {health_data.get('model_loaded', 'Unknown')}")
            except:
                print("   (–û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ)")
        else:
            print(f"‚ö†Ô∏è  Health endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # 2. –¢–µ—Å—Ç predict endpoint
    print("\n2. ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ predict endpoint...")
    try:
        response = requests.post(
            base_url,
            json=test_payload,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                print("‚úÖ Predict endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if isinstance(result, list) and len(result) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–º–µ—Ç—Ä–∏–∫–∏)
                    first_item = result[0]
                    if 'MAPE' in first_item and 'MAE' in first_item and 'DaysPredict' in first_item:
                        print("‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                        print(f"   –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏: MAPE={first_item['MAPE']}, MAE={first_item['MAE']}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                        if len(result) > 1:
                            forecast_item = result[1]
                            required_fields = ['–ü–µ—Ä–∏–æ–¥', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ö–æ–¥', 'MAPE', 'MAE', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
                            missing_fields = [field for field in required_fields if field not in forecast_item]
                            
                            if not missing_fields:
                                print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                                print(f"   –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_item['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']} - {forecast_item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —à—Ç.")
                            else:
                                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                        else:
                            print("‚ö†Ô∏è  –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                    else:
                        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–º–µ—Ç—Ä–∏–∫–∏)")
                else:
                    print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                print("\nüìä –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:")
                print(json.dumps(result[:3], ensure_ascii=False, indent=2))
                
            except json.JSONDecodeError:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:200]}...")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É")
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # 3. –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å backend
    print("\n3. üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å backend...")
    print("   –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É:")
    print(json.dumps(test_payload, ensure_ascii=False, indent=2))
    
    return True

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_external_ml.py <URL>")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_external_ml.py http://192.168.1.100:8000/predict")
        print("  python test_external_ml.py https://ml-api.yourcompany.com/predict")
        sys.exit(1)
    
    ml_url = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /predict
    if not ml_url.endswith('/predict'):
        print("‚ö†Ô∏è  URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/predict'")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {ml_url}")
    
    test_external_ml_service(ml_url)
    
    print("\n" + "=" * 60)
    print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   $env:ML_SERVICE_URL=\"{ml_url}\"")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend:")
    print("   cd backend && npm run dev")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend:")
    print("   cd frontend && npm run dev")
    print("4. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5174/sales-forecast-new")

if __name__ == "__main__":
    main() 